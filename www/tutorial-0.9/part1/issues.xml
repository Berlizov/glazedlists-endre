

<issuezilla exporter="guest" charset="UTF-8" version="2.11" urlbase="https://glazedlists.dev.java.net/issues/" maintainer="owner@glazedlists.dev.java.net" project_domain="dev.java.net" project_name="glazedlists" project_id="1073" dtd_version="Revision: 1.2">
<issue status_code="200" status_message="OK">
  <issue_id>1</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040521142009</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>TASK</issue_type>
  <creation_ts>2003-12-02 22:09:52</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Improve filter performance upon list change</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2003-12-02 22:09:52</issue_when>
   <thetext>The current implementation of filtering uses a N*N*M algorithm to re-filter when the list 
changes, for M changes on a list of size N.

It is necessary to improve this runtime by using more appropriate data structures inside 
the AbstractFilterList.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-06 09:45:50</issue_when>
   <thetext>Created an attachment (id=1)
screenshot from profiler
</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-06 09:47:00</issue_when>
   <thetext>In creating a test case I found that the filter performance can be really bad in certain situations.

I think this case can be justification for updating the AbstractFilterList to use a SparseList instead of the 
current arraylist hack.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-08 08:50:13</issue_when>
   <thetext>I have changed the AbstractFilterList to use SparseList instead of the hack array data structure. The 
results are impressive in some cases only and not noticable in other cases. This change will cause 
change events to be orders of magnitude faster, while get() events will be slightly slower.

Here is the results in elapsed time from two tests I ran, before and after the fix:
CaseInsensitiveFilterListTest
before: 3.9s
after: 2.8s

MultipleListenersTest
before: 162.9s
after: 19.2s</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:20:09</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <attachment encoding="Base64">
    <mimetype>image/png</mimetype>
    <attachid>1</attachid>
    <date>2004-04-06 09:45:50</date>
    <desc>screenshot from profiler</desc>
    <ispatch></ispatch>
    <filename>hprof.png</filename>
    <submitter_id>3</submitter_id>
    <submitting_username>jessewilson</submitting_username>
    <data>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
3WTvWq9fJYT9D4IgCIJpMob9Xy4AxBWAIAiCIJgmYvTts33lO9B7AO0jgHQ6S9j/IAiCIJgmY9j/
iAAIgiAIgomDIefRX6nj3nOAwT4qKEXY/yAIgiCYJmPY/4gAGJHv37/Pnj592vm7VFrCPErTDuWv
v/5KHmcg6XrwOVeel08tnjx5snGO69gy0axLPqVjNQiCcpjLchMge9xeHZDjpTcEmrr9L9Vl2KPn
z5+Pln9frL3fRNsV/EfOf8P+hW83jHXNjxoyDoIxGMP+/zarBHsR2ibPmTNnZufOnZtduHCheb18
+bJW8dkyU8qqpL5D+fbtm+uM5L7T3Lx5c3bnzp3m/6VLl1yliPK+evXq7N69e7/I9tGjR017WT3i
Jcbp/fv3s/v37zcv4c8//2zSp9Dprl+/Prt8+fLs9u3bzX9tPD5+/Nj08927d2dnz56dff78OZnf
0D54/PjxoB+btccA7dYy0iBX+uXhw4fN/1UsBKxLPm/evGnGVhAEdZGbAImxh677/VdNDT2LLiv5
QYBdLf3xZfMfc+HS2ntd3li+CL4P9pcXdrrvD6rw7X4l579Rp0337a5cudLq21Hetvl27969C98l
mCzV7f/8XxYDfz6Enz9/tqahuK9fvw4qp429vb35ly9fTpWpPwsl9bV5deXk5GS+v7/f+TuPa9eu
zV+9epX8bqEw50dHR817ZKzzfvDgwfzFixe/nLNQ8s1/zqP/kQll/Pjx45e0h4eHp/LQaW7durUs
W/IVuVFf8kxR0gc5FgN+vjDEvc8fWr4FOXvz6MaNG/MPHz4070mDzMZmnfI5ODgYfa4HwS6B3jg+
Pm5sB/qV+cX85oU+lvnKf3lxXOtqTz8Ntf85auhZrctydrmPXbX5j4Gtly5vLF9E/C3yp+yUD1DC
lH27VJm75NtZv0xYlW+HX5Nik3278F2CKTKG/XcjAFj9Y1WSFcfXr18vj7PCKMdZDRQ4JituHOd7
Vgp55VaeKUfnQ/6ywslKHPmwCqnrwDG+o0zyl/NZ3aQOrKhypVVIrYxwrqwwptrk5dUmH+olK+F2
FTj3Hauunz59cuUErOCeP38++R2PguDKK7Imn4Wyz7Y/dZxVYFZeyctCG1mt1uUJrASzIg6Uvxik
y3pSDz6n0GPG61MoGU/6OOnpN6FtzPYZgynIQ8tdw0o5q+oiE6+vU+VxRUFHDXCubt8U5cM5b9++
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
Xa0uyiR1akHZdF7kLWVDDvBo+1eew4+WE6Ds6BBhlkbD6kdK9ltbW0n6mI6m6kPoyQ9+dX5N+kge
msaRB/QT2b1//76yt8i+NPbVcy76H9oAz+kvuHgm9QFiOmWfn5mmtn96cT149OR85f1W/bt+/uDR
+ebucXW/8m7zfH7xTR1WejvV772T/87frG6UuvPg/N3mXk23tXfaKr2LsJPqnvTgSfP36fCsyot4
mgee2/tU/Nn5xfPd49/nq+8/nT+bXQjyZvO3+UTTiOSb4kdk2DqvTH5tXaTkHKurVPqSNmmG0iIN
dEPiRWWU4CtUz9Bzj2xCvEt+qXj6+rT/o+ZnaeX9gKwl38U376r03m/tV2VqSt/KPlTfMfml2uRg
mkXFF+2Jq7FtWH2o6uN3pm4WlZwsT23rJERv80q1mVA9CH+SBmFPns1nyWNzL653pPPoybNal+cX
ls4XllZqWcfqL8UnNLqs+kLv4Mnqn1yUifRCYaRr2yBp2TqzaXC/uLRaXfQzWo8G2kgpM50++Und
wS9yCvFm88vlM6UHtI0nz2YrXSNfq9OhtjOoA2FdSemw0CMj9MDymOKXPDQN17jsf3QLALMIzCzw
hopZBZZtyltAnvF2itkHZh1A7C2WBrMXvA1itiL1Ni43np6tifGZSqtpeQRlYpaFN4m8/Zc3fH0D
fuVtMtD7mEGsbDnILX9THiyFZiaJN3rIJIeGt4H6MAr44MrlvUud5qKvtG+7jqTyQH/GoSMhPuiL
QkvWWdove+xl+X/Xpe284dcrmZA1ZWI5P2+zSVdWAWiwZUUvh5c9WMRlKT+zsfp8AH4jJ/JiNlev
VuE55SAPaHLrMCZ77uG/C3L0AtkzG02ZkRH1hCxSusKWCqu/jjyI3aWu+Su6Lp8CkjpjhQZ1wlsA
fUhQ9paAQDTenrD3dWl5dSAe+zeLmfvVck8wzxuMg8G3oivvPl5+x/hJ8Wy21KnFpUu+Hxd/fp8N
5FmnNzucXrVcuwq78Dvm1Juv78dfi79/fhdftjeKncu3h/AcKxdhqfir6xdt6glt6s9ZnYfmTecf
kplO4zdp/I3n28R/JUO7XELlubpm8hL6GL8JVEuwQ3I2ZRyQx990+k/KvoG6/X5yVOmRTo83dRur
F0uaL+JZWfytnqXqP7aUF71D59ZXFi74jQDZ1vGs3qg8Dr7sFC9KnaQtLSwsl3GPzBvjolhaubDX
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
2LdZK2eOs3YGgMAveyEjc5YJ/3HvOW7sKy+1Sywn+1eUB/ZZko7y2aobfrN/jTSoy7iXtNS+rbLE
PiDIF/VDHoiLT3zLQWxDwpMP/hN/fnsAblwnv9rjRx+OfZr6ZN+i7skI9RHfLEBeSYu85Xqm7NQT
1yh/ad9hrtuePsg10lL+YxjKQd3ih+/au9iq83yf4i+XvXafxjcrGHNWyHsABd9x077jKW8B6D3V
XPufW3IZ8v3a8h9lpXRslhXQ0mnxu+Krve0Gd8kKnQGAzOC6/PfoNsnOLKtaZc3yUm2Ty7aUPTHF
tqnJb/rWkG4eq1cB2U2c6EP+x/3/sSwtPVfTuUvp1Uipjik3ZdG9SRni71q/sB41xsAS+n/UawBL
h4xMec1I7XC/nPmhQwChJaB6wtfSroXf9zVIvWU/6Tjj4X9Lps/vKenkTj2GfECiKOV7TJ8ZA2Wu
5Ru3nO5YxZsPoRpi7lcuDtVbK2/71nkMj8G27ytNjVkjKO/8GiDdV8iQ/Cqg7EdxlOi9Z7KeGCuX
e/y34tlHT7bSqsW5j25tlbVmW4wt29T8tWyb0iGNQ20y5G+KjN/3FXQlnTtFr05lSpmtR40xJZbQ
/59VlwYUKC2ZmrJ3qbb0KsfVs+e+tUdpzJ79UjnmKm9PnvaJd984te9ryj67senHPe5jGHswFMti
tB+GT172CaV873vOQ41WmUtuY/fesbQ17v0ZYuoSxxpD9dbK1751HsOzhHFqPzbmEJGMY690lpNc
54yPoft9SG7wytiNIfGBnhgrl3v8t+KZcw99jK8W7z66tVXWk7alesJNrfeeNp0i4/eV43PpVe6f
KflfIoz1qDEmso/+/6x41XxUsM/rrO31Yp+b9nTOPdhdI3MfMHWo2GgxZ5nSJB8KnmsM0KObDIN8
bQpMoPpwzY8D9qSjP83Hq1etR41ZH3Prf08AmMWeep82NlaNMWeNrMT15hvN+Mf/2f/ktwJswlme
fjx8DJPmxhhzaMyp/3cTAHO+escYY4wx84GOZlUTCl+z+6CnlKx2iq/0lCHAZ2hAZ/1vjDHGrJMl
9H/1DAD2hffs7SoZDnkmIl8rhS2947Dk7vAnF57OFK/R8ehkOWyOf6hPOLzDO7zDryV8KQzXtDIq
y01Rk7fZb+/1kr+o6Ke8orWXk9D/WqqocLWwOW6WNrK/Ue7RsCm5O7zDO7zDf+zhsdfjdfxLp2Wd
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
QmCC
</data>
  <attachment_iz_url>https://glazedlists.dev.java.net/nonav/issues/showattachment.cgi/1/hprof.png</attachment_iz_url>
  </attachment>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-06 09:45:50</when>
    <field_name>attachments.thedata</field_name>
    <field_desc>Attachment Data</field_desc>
    <oldvalue></oldvalue>
    <newvalue>Created an attachment (id=1)
screenshot from profiler
</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 08:50:13</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 08:50:13</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:20:09</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>2</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P2</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040130155512</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2003-12-02 22:11:34</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Filter regex fails with special characters</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2003-12-02 22:11:34</issue_when>
   <thetext>The current filter code for CaseInsensitiveFilterList fails to work when the filter text 
contains regular-expression characters such as dot.

Fix this to handle special characters as they should be.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2003-12-27 14:40:16</issue_when>
   <thetext>Fixed in CVS. Added a method getMatcher() that constructs a matcher using the source 
string</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-30 15:55:12</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2003-12-27 14:40:16</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2003-12-27 14:40:16</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-30 15:55:12</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>3</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040130155416</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>ildella</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-01-07 17:36:37</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>EventListIterator problem with remove() method</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>ildella</who>
   <issue_when>2004-01-07 17:36:37</issue_when>
   <thetext>This code doesn't seem to work properly: 
(variable "songs" is a BasicEventList)

	public int cleanFromMissingFiles() {
		Iterator it = songs.iterator();
		while (it.hasNext()) {
			MP3Song song = (MP3Song) it.next();
			File f = new File(song.getPath());
			if (!f.exists())
				it.remove();	
		}
	}

if there are 2 items to remove, after removing the first, the iterator return
false at the next call to hasNext()
if, for example, there are 8 items to remove, the hasNext() return false after
the 4th remove() calls. 
And so on...

the rest of the code is right, in fact, with this code:

	public int cleanFromMissingFiles() {
		List list = new LinkedList();
		list.addAll(songs);
		Iterator it = list.iterator();
		while (it.hasNext()) {
			MP3Song song = (MP3Song) it.next();
			File f = new File(song.getPath());
			if (!f.exists())
				it.remove();
		}
		songs.clear();
		songs.addAll(list);
	}

everything is all right.

hope this can help.
bye.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-09 13:03:16</issue_when>
   <thetext>This was a defect in my iterator code.

The iterator contains two indexes - the index of the last item viewed and the index of the 
next item to view. When a remove occurred, only the last item viewed index was updated. 

The next item to view index needed to be shifted down by one whenever a remove would 
cause the list's indicies to shift down by one.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-30 15:54:16</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-09 13:03:16</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-09 13:03:16</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-30 15:54:16</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>4</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040211073459</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>ildella</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-01-14 20:06:46</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Error in setting header value in TableComparatorSelector</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>ildella</who>
   <issue_when>2004-01-14 20:06:46</issue_when>
   <thetext>Maybe there is a problem in TableComparatorSelector.

I set tableHeader.setReorderingAllowed(true) on a table which has its own
TableComparatorSelector. 
I move a column. After moving, the index of the column is changed, but the
modelIndex remains unchanged. 
This is wel handled in method mouseClicked with trhis code 

        int viewColumn = columnModel.getColumnIndexAtX(e.getX()); 
        int column = table.convertColumnIndexToModel(viewColumn); 

the last method, which rewrite the table header of all the columns, has the
following code:

        // and set the name of the table header to the current comparator
        for(int c = 0; c &lt; table.getColumnCount(); c++) {
            if(c == column) {                                                       
              table.getColumnModel().getColumn(column).setHeaderValue(sortedHeader);
            } else {
                String header = listTable.getTableFormat().getFieldName(c);
                table.getColumnModel().getColumn(c).setHeaderValue(header);
            }
        }

this method doesn't seem to handle difference between column index and model index.
In my app, when I move a column and then click on the header for resorting the
table, all the header value happen to move from their position. And this seems
to be caused by that portion of code wich, I guess, has to use the view index
and not the model index of the column. 

If I am right, that code has to handle difference between index and model index.
If I am wrong, there are different way to handle this thing?</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-15 14:49:48</issue_when>
   <thetext>The problem looks legit. In most of my use of ListTable I use only a single column so 
multiple columns is not well exercised!

I'll try to reproduce the problem and look into a fix.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-22 14:51:50</issue_when>
   <thetext>I've fixed the bug and done preliminary testing to verify that the fix worked.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-11 07:34:59</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-15 14:49:48</when>
    <field_name>assigned_to</field_name>
    <field_desc>Assigned To</field_desc>
    <oldvalue>issues@glazedlists</oldvalue>
    <newvalue>jessewilson</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-22 14:51:50</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-22 14:51:50</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-11 07:34:59</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>5</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040211073533</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-01-15 14:40:43</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Speed up SparseLists</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-15 14:40:43</issue_when>
   <thetext>The SparseListNode's height() method slow. More formally, this method is potentially O(n) 
and it should be optimized to be O(1).

This is insignificant in small lists but huge in large lists. In my brief profiling I discovered 
that height() can consume 75% of the access time for large lists.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-22 16:08:39</issue_when>
   <thetext>I have tuned SparseLists to use a better height() method. The height is now stored 
in the node and recalculated whenever it may have changed (as a consequence of 
insert or remove).

The performance gains are fantastic.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-11 07:35:33</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-22 16:08:39</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-22 16:08:39</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-11 07:35:33</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>6</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>INVALID</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040211073416</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>ildella</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-01-16 12:29:12</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>MutationList return "parent" source instead of its own</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>ildella</who>
   <issue_when>2004-01-16 12:29:12</issue_when>
   <thetext>MutationList getRootList was
    
    public EventList getRootList() {
    	return source;
    }

as of revision 1.3 on CVS.

In revision 1.4, it is:

    /**
     * For implementing the EventList interface. This returns the root of the
     * source list, or &lt;code&gt;this&lt;/code&gt; if this list has no source.
     */
    /*
    public EventList getRootList() {
        if(source == this) return this;
        return source.getRootList();
    }

and this broke all my code and my coomprehension of Glazed Lists.

Is this correct?</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-16 13:49:42</issue_when>
   <thetext>Forgive me for breaking your code. The newest revision in CVS is correct and the previous 
revision was a bug.

In your own code when you need the source list, you are supposed to use 'source', which 
is a protected member of the MutationList class. If you change your calls to 'getRootList()' 
with 'source', your code should continue to work as it is supposed to.


Here's why I made the change:

Glazed Lists needs to be thread-safe. Currently I have made every effort to make it totally 
thread-safe. To accomplish thread safety I need to synchronize threads while they are 
performing updates to the lists. In my original implementation, each list would be coded 
like this:
    public synchronized void notifyListUpdated()
    public synchronized void get()
Unfortunately this strategy can fail for thread safety in deadlock because the Swing thread 
can be doing a get() while the query thread is doing an update. The get() call propagates 
from the table to the filter to the sorted list and eventually to the source list, holding all 
the locks as it works. The notifyListUpdated does the opposite, starting at the source list 
and propagating through the sorted list, the filter and finally the table, attempting to 
acquire locks as it goes also. A deadlock is the inevitable result because the Swing thread 
is waiting for the query thread to release its lock on the source list while the query thread 
waits on the Swing thread to release its lock on the table.

So my naive solution failed and I realized that I needed to synchronize all lists with the 
same lock. The obvious lock to choose is the root list - the absolute source list in the tree. 
This is the list that all of the other lists depend on.

As you walk through the code, you will see that I protect against thread problems with
    synchronized(getRootList()) {
    }

But I still access the parent list with 'source'. For example, the following is cut-and-pasted 
from SortedList:

    public void setComparator(Comparator comparator) {
        synchronized(getRootList()) {
            // create the sorted list with a simple comparator
            sorted = new IndexedTree(new IndexedTreeNodeComparator(comparator));
            // create a list which knows the offsets of the indexes
            unsorted = new IndexedTree();

            // we're done if there's no elements in the source list
            if(source.size() == 0) return;

            // add all elements in the source list, in order
            for(int i = 0; i &lt; source.size(); i++) {
                IndexedTreeNode unsortedNode = unsorted.addByNode(i, this);
                insertByUnsortedNode(unsortedNode);
            }

            // notification about the big change
            updates.beginAtomicChange();
            updates.appendChange(0, size() - 1, ListChangeBlock.DELETE);
            updates.appendChange(0, size() - 1, ListChangeBlock.INSERT);
            updates.commitAtomicChange();
        }
    }

The second line is synchronized on getRootList(), but all of the calls to size() are directly 
on source.

In summary

Whenever you are synchronizing, use
    synchronized(getRootList())
but for everything else use
    source</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-11 07:34:16</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-16 13:49:42</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-16 13:49:42</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>INVALID</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-11 07:34:16</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>7</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040404145045</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>ENHANCEMENT</issue_type>
  <creation_ts>2004-01-21 12:19:22</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>CaseInsensitiveFilterList non-"live" mode</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-21 12:19:22</issue_when>
   <thetext>If you have a CaseInsensitiveFilterList with many entries and you filter for "foo", then the 
list will be filtered three times! Because the list is "live" it filters once after the user types 
"f", another time after they have typed "fo" and finally a third time after they have 
completed "foo".

This is great when filtering is very fast and the list is short but it leads to unnecessary 
performance lags when the list is large and filtering isn't as fast.

The CaseInsensitiveFilterList should have a non-"live" mode where the list is only filtered 
after the user presses the Enter key in the search box. There could also be a "filter" 
button to activate the filter after the filter text has been entered.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-11 13:42:28</issue_when>
   <thetext>I've added some new methods to CaseInsensitiveFilterList:

getActionListener()
setLive(boolean)

The ActionListener can be used to trigger a refilter on a button press. 
The list also will always refilter when ENTER is pressed in the filter edit field, whether in live mode or 
not.

Finally the DocumentListener has been moved to an inner class which is a 'safer' place for it.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-04 14:50:45</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-11 13:42:28</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-11 13:42:28</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-04 14:50:45</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>8</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040211073606</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-01-23 07:42:58</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>ListChangeSequence hasNext() fails when there's no next</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-23 07:42:58</issue_when>
   <thetext>There are two things that happen when a list changes:
  - the ListChangeEvent is populated with the change information
  - the notifyListChanges() method is called on all listeners

Sometimes as a consequence of multi-threading, multiple change events are processed in 
a single notifyListChanges() methods. When the notifyListChanges() is called on a different 
thread than where the changes were created, that method is required to verify that there 
are changes left to be processed using:
    listChanges.hasNext()

This is performed by the ListTable because it receives all events on the SwingThread via 
ListChangeListenerEventThreadProxy:
    public void notifyListChanges(ListChangeEvent listChanges) {
        ...
        // when all events hae already been processed by clearing the event queue
        if(!listChanges.hasNext()) {
            return;
        ...

Unfortunately the listChanges.hasNext() method is broken, and throws an 
IndexOutOfBoundsException when there are no more changes:
java.lang.IndexOutOfBoundsException: Index: 43, Size: 43
	at java.util.ArrayList.RangeCheck(ArrayList.java:507)
	at java.util.ArrayList.get(ArrayList.java:324)
	at 
com.odellengineeringltd.glazedlists.event.ListChangeSequence.getBlockCount(ListChangeSe
quence.java:181)
	at 
com.odellengineeringltd.glazedlists.event.ListChangeEvent.hasNext(ListChangeEvent.java:
124)
	at com.odellengineeringltd.glazedlists.jtable.ListTable.notifyListChanges(ListTable.java:
158)
	at 
com.odellengineeringltd.glazedlists.event.ListChangeListenerEventThreadProxy.run(ListCha
ngeListenerEventThreadProxy.java:54)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:178)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:454)
	at 
java.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:
151)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:145)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:137)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:100)</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-24 11:30:31</issue_when>
   <thetext>The ListChangeEvent now checks with the target ListChangeSequence to verify that it has 
not already reached the last atomic change in the set.

This should fix the problem as it has in my preliminary tests.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-11 07:36:06</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-24 11:30:31</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-24 11:30:31</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-11 07:36:06</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>9</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040223154018</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>ildella</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-01-26 12:35:18</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>fails to report selection event</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>ildella</who>
   <issue_when>2004-01-26 12:35:18</issue_when>
   <thetext>The problem is in this code:

class ListTable 
...

    public void notifyListChanges(ListChangeEvent listChanges) {
        // for avoiding extra selection events
        ignoreSelectionEvents = true;
        // when all events hae already been processed by clearing the event queue
        if(!listChanges.hasNext()) {
            return;
        // notify all changes simultaneously
        }

it is needed to add this line

     	ignoreSelectionEvents = false;

before that return. Without that line, it could happen that
ignoreSelectionEvents remains false and selection event are no more propagated.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-26 12:57:47</issue_when>
   <thetext>The bug has been fixed.

The bug report was very useful in helping me fix this bug quickly!</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-23 15:40:18</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-26 12:57:47</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-26 12:57:47</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-23 15:40:18</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>10</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040223153929</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-01-27 21:37:01</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>IndexedTree insert and remove are too slow</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-27 21:37:01</issue_when>
   <thetext>The height() method on the IndexedTreeNode is not optimized and prevents the 
IndexedTreeNode from functioning efficiently. The method has O(n) runtime while proper 
optimization should yield O(log n) runtime.

This is because the height() method does not cache the height of the values at the nodes.

Fix the height as done for issue #5 with SparseListNode and the IndexedTree will perform 
much more efficiently.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-28 09:54:04</issue_when>
   <thetext>I have resolved the speed issue with the IndexedTreeNode.

This will impact the SortedList and cause it to perform faster sorts!</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-23 15:39:29</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-28 09:54:04</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-28 09:54:04</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-23 15:39:29</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>11</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040223154221</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>philblais</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>ENHANCEMENT</issue_type>
  <creation_ts>2004-01-30 06:16:51</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Expose prepareRenderer from JTable into ListTable class</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>philblais</who>
   <issue_when>2004-01-30 06:16:51</issue_when>
   <thetext>I like having the ability to alternate colors on each of the rows of my tables so 
that they look more like a ledger.  Since ListTable creates the JTable object it 
makes it impossible to use this approach to render this.

I propose to expose this method into ListTable so that it can be overriden if 
necessary.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-30 07:40:27</issue_when>
   <thetext>philblais - Glazed Lists already has a place where you can configure your table and 
prepare your renderers as necessary.

You will have implemented the interface TableFormat which contains a method 
configureTable(). This method is called after the JTable has been created and its purpose is 
to allow you to modify the table's renderers to your liking:

    /**
     * Allow the record model to customize the table to its liking
     * This method is called after the table is created so that the
     * record can ensure the table behaves appropriately. This may
     * include setting the editors and renderers for the table.
     */
    public void configureTable(JTable table);

Please call prepareRenderer() from this configureTable method and I hope you will get 
your desired results.

If my understanding of your problem is incorrect please explain why calling 
prepareRenderer() from your configureTable() is insufficient and I will make quick 
progress at getting it working for you.

Good luck with your project!</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-30 15:30:17</issue_when>
   <thetext>On 30-Jan-04, at 10:54 AM, Philippe Blais wrote:

Hi,

The way it now it won't work.  The JTable's prepareRenderer method is called
dynamically with the cell's renderer, the row index and the column index.
In my project I use the row index to decide what kind of background I want
for all the renderers on the row.

I made a quick and dirty mod to ListTable for now since I couldn't simply
subclass it, my mod looks as follows in the constructWidgets method:

--
table = new JTable(this)
{
	public Component prepareRenderer(TableCellRenderer renderer, int
rowIndex,int colIndex)
	{
		Component c = super.prepareRenderer(renderer, 
				rowIndex, colIndex);
		if (rowIndex % 2 == 0 &amp;&amp; !isCellSelected(rowIndex,
colIndex)){
		if (alternateShadingColor!=null) {
			c.setBackground(alternateShadingColor);
		} else {
			c.setBackground(getBackground());
		}
	} else {
		c.setBackground(getBackground());
	}
	
	return c;
}
--

On simple way to allow extending ListTable for this functionality would be
to delegate the creation of the table to a protected method of ListTable
that can be overridden by whoever wants to extend ListTable.

My suggestion is to change the "new JTable(this)" call to
"createTable(this)" where the method would look like:

protected JTable createTable(TableModel model) {
	return new JTable(model);
}

This way I would have the ability to use my own extended JTable.

Thanks,

Phil Blais
</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-30 15:44:58</issue_when>
   <thetext>Phil Blais - 

I have written a fix for your problem and I hope that you find it sufficient! 

But first, an explanation as to why I have not fixed your problem the way you have 
suggested. The problem with allowing the user to extend JTable is that it prevents me 
from extending JTable in the future.

My solution involves a custom renderer called StripedTableCellRenderer which I have 
added to the com.odellengineeringltd.glazedlists.jtable package. In your TableCell class 
you will need to set each column's renderer to use this StripedTableCellRenderer:

public void configureTable(JTable table) {
    Color oddColor = new java.awt.Color(234, 234, 234);
    Color evenColor = table.getBackground();
    StripedTableCellRenderer renderer = new StripedTableCellRenderer(oddColor, 
evenColor);
    for(int i = 0; i &lt; getFieldCount(); i++) {
        table.getColumnModel().getColumn(i).setCellRenderer(renderer);
    }
}

The StripedTableCellRenderer uses the default renderer from the table so classes like 
Boolean and Number should render correctly.

It is also possible to specify a base renderer to use. In this case the StripedRenderer will 
use that renderer to do the initial drawing and then paint its own stripe onto the row.

Let me know if this solution is still insufficient and I will work with you to resolve any 
outstanding problems.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-23 15:42:21</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-30 07:40:27</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-30 07:40:27</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>INVALID</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-30 15:30:17</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>REOPENED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-30 15:30:17</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue>INVALID</oldvalue>
    <newvalue></newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-30 15:44:58</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>REOPENED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-30 15:44:58</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-23 15:42:21</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>12</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040223154108</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>ildella</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-01-31 06:19:21</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Problem with ListTable.getSelected() ?</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>ildella</who>
   <issue_when>2004-01-31 06:19:21</issue_when>
   <thetext>Sometimes I receive this exception that seems to be connected to a problem in
getSelected() methods in ListTable.

java.lang.IndexOutOfBoundsException: cannot get from tree of size 14 at 47
	at
com.odellengineeringltd.glazedlists.util.IndexedTreeNode.getNodeWithIndex(IndexedTreeNode.java:81)
	at
com.odellengineeringltd.glazedlists.util.IndexedTree.getNode(IndexedTree.java:55)
	at com.odellengineeringltd.glazedlists.SortedList.get(SortedList.java:228)
	at
com.odellengineeringltd.glazedlists.jtable.ListTable.getSelected(ListTable.java:227)
	at
net.della.mcube.outliner.OutlinersBuilder$2.filterMatches(OutlinersBuilder.java:77)
	at
net.della.mcube.util.CustomFilteredList.filterMatches(CustomFilteredList.java:38)
	at
com.odellengineeringltd.glazedlists.AbstractFilterList.notifyListChanges(AbstractFilterList.java:93)
	at
com.odellengineeringltd.glazedlists.event.ListChangeSequence.commitAtomicChange(ListChangeSequence.java:154)
	at net.della.mcube.util.QueryList.refresh(QueryList.java:110)
	at net.della.mcube.util.QueryList$RefreshTask.run(QueryList.java:127)
	at java.util.TimerThread.mainLoop(Timer.java:432)
	at java.util.TimerThread.run(Timer.java:382)</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-01-31 10:56:33</issue_when>
   <thetext>This problem arises when the table selection is being accessed by a thread which is not 
the event dispatch thread. When the table selection is being modified by the event 
dispatch thread and a second thread attempts to access the selection, it is natural for the 
second thread to see an inconsistent view of the selection. This inconsistent view can 
cause unrelated exceptions to show up in other parts of the system. 


I have come up with three potential solutions to this problem:

1. Synchronize access to the table selection. The problem with this approach is that typical 
access to the table selection is done by the event dispatch thread which does not require 
synchronization. Therefore the synchronization will cause an unnecessary performance hit 
to typical use.

2. Require that all access to the table selection be performed on the event dispatch 
thread. This is how things work currently. But as is demonstrated there are cases where 
other threads such as timer threads need to access the table selection. The work around 
for this case is to use the SwingUtilities.invokeAndWait() method to schedule the selection 
access on the event dispatch thread. The biggest problem with this approach is that it adds 
complexity to the ListTable class.

3. Attempt to detect if the selection is currently being modified. This can be tested by 
whether or not the selection has a consistent state. If the state is inconsistent simply 
return null as if there was no selection.


I am trying to decide between solution two and solution three. Solution 2 will always 
return the correct value but it will also always take a long time when called by a thread 
which is not the event dispatch thread. Solution 3 will always return immediately but has 
the potential for returning the wrong value when the selection is being modified.

I will look through and continue to weight the pros and cons of each solution. Please let 
me know if you have any input which may help me make my decision.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-01 09:42:53</issue_when>
   <thetext>I have made the getSelected() method safe to call from threads which are not the event 
dispatch thread. To do this I have made the getSelected() method use a helper class which 
will do the actual selection lookup on the event dispatch thread.

In implementing this solution I have been thinking that the ListTable class should not be 
concerned with selection.  Unfortunately I cannot remove selection from ListTable without 
breaking existing code.

In the interim I am considering making the getSelected() method deprecated with clients 
accessing the SelectionList as an alternative. The problem with this solution is that like 
getSelected(), the SelectionList is not safe to be used any thread but the event dispatch 
thread.

I will continue to think about this problem. If anyone has any suggestions I am open for 
comment.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-23 15:41:08</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-01-31 10:56:33</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-01 09:42:53</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-01 09:42:53</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-23 15:41:08</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>13</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>INVALID</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040223154152</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-02-01 10:09:09</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>ListChangeSequence grows unbounded</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-01 10:09:09</issue_when>
   <thetext>The ListChangeSequence grows as more and more atomic changes are created. For a long-
running Glazed Lists application the memory usage may become a serious performance 
problem.

The ListChangeSequence should null out atomic changes when they are no longer in use 
and shift the array list when it grows too large.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-02 08:05:34</issue_when>
   <thetext>I performed a thorough examination of the memory usage of Glazed Lists and the 
application does not grow unbounded.

This can be verified in the code from the following lines that were cut-and-paste from 
ListChangeSequence:

        // attempt to reclaim some changes for the change pool
        int oldestRequiredChange = atomicChanges.size(); 
        for(int e = 0; e &lt; listenerEvents.size(); e++) {
            ListChangeEvent listChangeEvent = (ListChangeEvent)listenerEvents.get(e);
            int eventOldestChange = listChangeEvent.getAtomicChangeCount();
            if(eventOldestChange &lt; oldestRequiredChange) {
                oldestRequiredChange = eventOldestChange;
            }
        }
        // recycle every change that is no longer used
        for(int i = oldestChange; i &lt; oldestRequiredChange; i++) {
            List recycledChanges = (List)atomicChanges.get(i);
            changePool.addAll(recycledChanges);
            atomicChanges.set(i, null);
        }
        // now we have reclaimed all these change objects
        oldestChange = oldestRequiredChange;

I guess that when I was initially entering this bug I had forgotten that I had gotten around 
to adding this optimization. Nevertheless it is good to verify that there are no memory 
leaks when using Glazed Lists. In my simple test, Glazed Lists consumed less than 1000k 
of memory during the first 100,000 changes but consumed no additional memory for the 
following 1,000,000 changes. Therefore I conclude that memory usage does not grow 
unbounded.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-23 15:41:52</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-02 08:05:34</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-02 08:05:34</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>INVALID</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-23 15:41:52</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>14</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040408090738</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>FEATURE</issue_type>
  <creation_ts>2004-02-03 09:12:43</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>JList support</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-03 09:12:43</issue_when>
   <thetext>Glazed Lists needs to support JList alongside JTable and JComboBox.

It should be very straightforward to change between JList and JTable in an application:
 * The selection interfaces should be the same
 * The renderers should be the same

From Fred at l2fprod.com:
&gt; I was looking at an equivalent of "ListTable"
&gt; but which would encapsulates a JList. Do you 
&gt; have this on your todo list? I guess it could
&gt; share code with the ListTable


This functionality should get its own package,
    com.odellengineeringltd.glazedlists.jlist
Perhaps the class name could be EventJList.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-19 18:30:54</issue_when>
   <thetext>I've done some preliminary work on this and I've run into a few snags.

My first problem is with rendering. I cannot get the preferred width in order to render the cells 
nicely, because the getSize() methods depend on the results of the rendered cells! It also seems 
to be a lot slower than JTable when scrolling through a long list of rendered cells.

One thing that this has brought me to think about is better naming for some classes. ListTable is 
fine for an event list JTable, but the matching "ListList" does not make much sense. My working 
name is "EventJList" which I think is a decent naming convention. I am pondering what the 
consequences would be if I renamed everything in Glazed Lists to make more sense. If I were to 
do that I would probably also want to change the package names. O'Dell Engineering is now using 
a better package prefix of "ca.odell" which might in and of itself be worth the costs of migration.

Still I have users and CVS is unfriendly to directory deletes. I'll worry about that later. For now I 
get to think about how to do JLists right.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-09 16:31:37</issue_when>
   <thetext>I have implemented EventJList. The class shares the following with ListTable:
 - SelectionListener interface
 - SelectionList / Selection Model

This class never batches groups of changes like ListTable does. It also does not use a Mutable change 
event. It may be necessary to create a mutable ListDataEvent if change event creation proves to be a 
bottleneck.

This class still does not have any extra renderer support. For now if styled rendering is necessary, the 
use of ListTable is a sufficient work around.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-08 09:07:38</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-19 18:30:54</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-09 16:31:37</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-09 16:31:37</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 09:07:38</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>15</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040309163956</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-02-10 08:48:25</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Inserted items become selected</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-10 08:48:25</issue_when>
   <thetext>I am delighted with the performance, flexibility and ease of use of your platform, which I am 
currently evaluating for use in a table intensive application for my employer.

Our application needs to display tabular data which gets notified through JMS. That means, 
ultimately, that data arrives via a callback method in out code. I am therefore using a 
BasicEventList as base list, encapsulated in a SortedList and a subclass of AbstractFilterList as a 
means of providing the functionality (sorting &amp; filtering by various criteria) that we need.

The only problem so far arises with keeping selected rows between data insertions. I set the 
underlying table selection model to ListSelectionModel.MULTIPLE_INTERVAL_SELECTION (anyway, 
as it is the default value). A thread keeps adding rows to the table, at a rate of 10 per second (to 
test performance). I have noticed that whenever I select a row, further row insertions may 
modify the number of selected rows. In particular, if a new row has the same internal index as 
the currently selected one, it is guaranteed I will end up with two selected rows.

That seems to be your intended behaviour as per the documentation of the class SelectionList; 
however, I tried to modify it in order to suppress this behaviour to no avail. In particular, I 
suppressed the lines marked inside SelectionList.notifyListChanges():
// when an element is inserted, it is selected if its index was selected
} else if(changeType == ListChangeBlock.INSERT) {
    // when selected, add the flag and fire a selection event
    if(previouslySelected) {
        flagList.add(index, Boolean.TRUE); // &lt;--- SUPRESS
        updates.appendChange(previousSelectionIndex, ListChangeBlock.INSERT); // &lt;--- SUPRESS
    // when not selected, just add the space
    } else {
        flagList.add(index, null);
    }

I tried other changes, including the method SelectionList.valueChanged(). Do you have any 
suggestion to solve this problem? Is it a bug in your code? In that case, I'd be willing to help and 
contribute back to your project any bugfixes I develop. I can also provide you with my testing 
code, but at this stage it's really simple: the thread inserting fake data rows does so in an 
invokeLater() block, and uses a java.util.Timer for scheduling data feed.

The problem does not manifest when I set the table selection model to 
ListSelectionModel.SINGLE_SELECTION, by the way.

Thank you for your time and for providing the Java Community with such a promising piece of 
work.

Yours
Iván Rivera Rodríguez</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-10 08:58:51</issue_when>
   <thetext>Iván -

The current behaviour is "as designed" but I agree that there may be a better way to solve this 
problem.

This behaviour is the same as the behaviour of a simple JTable (ie. no Glazed Lists). When JTable 
receives in insert at some index, say i, then the newly inserted row will be selected only if row i 
was selected before the insertion. This behaviour has some nice properties: values inserted 
within a range of selected values will themselves become selected.

But I also agree that this behaviour can be problematic. I think the solution is to add an extra 
"mode" to the SelectionList. The new mode will be as you describe. Inserted values will never be 
selected until done so explicitly by the user.

Due to constraints at school and at work I will be unable to add this functionality until at least 
February 14th, 2004. In the worst case it will take until February 21st to complete. Hopefully then 
I will get something working that solves this problem!</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-12 08:58:18</issue_when>
   <thetext>According to the J2SE 1.4.1 API for DefaultListSelectionModel:
"If the value at index is itself selected and the selection mode is not SINGLE_SELECTION, set all of 
the newly inserted items as selected.  Otherwise leave them unselected. "
http://java.sun.com/j2se/1.4.1/docs/api/javax/swing/
DefaultListSelectionModel.html#insertIndexInterval(int,%20int,%20boolean)

I have tested some of the simple ways to solve this problem and I do not think that they will work 
elegantly. The problem is that I need to undo the selection which is added by 
DefaultListSelectionModel. This would be trivial except that the ListSelectionModel fires events that 
also need to be done and undone.

I am considering changing the Interface of SelectionList, to become a ListSelectionModel and 
EventList simultaneously. This approach is complex but appropriate as the SelectionList already 
tracks the table selection.

I will continue to review my options but for now it looks like implementing ListSelectionModel is my 
best bet.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-15 16:02:14</issue_when>
   <thetext>I have solved the problem by implementing ListSelectionModel. Implementing this class was 
difficult as the interface specification was not explicit enough for the behaviour in certain cases. I 
think that the behaviour of my ListSelectionModel should be the same as the J2SE 1.4 
DefaultListSelectionModel. If you discover a descrepancy, let me know.

This new ListSelectionModel has a new mode for solving this problem 
"MULTIPLE_INTERVAL_SELECTION_DEFENSIVE". The new mode is the default list selection mode. 

My ListSelectionModel is fully capable of switching between different modes and retains the 
appropriate selection when the mode changes. To test this, there is a commented out block of 
code in ProgrammingLanguageBrowser.java that provides a JComboBox to switch between 
different ListSelectionModel modes.

I hope this fix helps, it took quite a bit of code to make it work - 653 lines!</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-16 09:38:36</issue_when>
   <thetext>From Iván Rivera:

Thank you very much. I had also some time to work on the issue last Friday and came up with a 
subclass of javax.swing.DefaultListSelectionModel which undoes the selection, without caring for 
events generated. I append a copy to this mail for you to examine, as it seems to correct the 
(Swing-default) behaviour.

You are right about the event handling problem, but it doesn't seem to be causing troubles in my 
test benchmark. Perhaps it's just a matter of performance. Anyway, your solution is surely more 
elegant. I won't be able to see your code until this night at home, since at work I'm behind an 
extremely restrictive firewall which doesn't even allow SSH tunneling for CVS checkout.

I'm working in some components to enable automatic width adjustment for columns based on 
content and column hiding. I hope to be able to contribute the code once I'm done (this week, 
most likely).

Once again, thanks for your interest.

Yours,

Iván Rivera</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-09 16:39:56</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-10 08:58:51</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-15 16:02:14</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-15 16:02:14</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-09 16:39:56</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>16</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040309164036</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-02-11 07:14:58</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>No removeSelectionListener() method in ListTable</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-11 07:14:58</issue_when>
   <thetext>Hi,

at minimum the ListTable has no removeSelectionListener(SelectionListener)
method ...

Any plans to correct this?

Cheers,

Joern</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-11 07:21:49</issue_when>
   <thetext>The method had been omitted in error.

I have added it to the latest revision in CVS.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-09 16:40:36</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-11 07:21:49</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-11 07:21:49</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-09 16:40:36</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>17</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P1</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040309163907</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-02-23 12:35:47</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Selection concurrency ArrayIndexOutOfBoundsException</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-23 12:35:47</issue_when>
   <thetext>I got the following exception:

[tasks] Interrupting worker thread to run Adding Article
apple.awt.EventQueueExceptionHandler Caught Throwable : 
java.lang.ArrayIndexOutOfBoundsException: Cannot get selection index 0, list size 0
        at 
com.odellengineeringltd.glazedlists.listselectionmodel.SelectionModelEventList$EventListSelectionMode
l.isSelectedIndex(SelectionModelEventList.java:505)
        at javax.swing.JTable.isRowSelected(JTable.java:1451)
        at javax.swing.JTable.isCellSelected(JTable.java:1481)
        at javax.swing.JTable.prepareRenderer(JTable.java:3725)
        at javax.swing.plaf.basic.BasicTableUI.paintCell(BasicTableUI.java:1149)
        at javax.swing.plaf.basic.BasicTableUI.paintCells(BasicTableUI.java:1051)
        at javax.swing.plaf.basic.BasicTableUI.paint(BasicTableUI.java:974)
        at javax.swing.plaf.ComponentUI.update(ComponentUI.java:142)
        at javax.swing.JComponent.paintComponent(JComponent.java:541)
        at javax.swing.JComponent.paint(JComponent.java:808)
        at javax.swing.JComponent._paintImmediately(JComponent.java:4695)
        at javax.swing.JComponent.paintImmediately(JComponent.java:4488)
        at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:410)
        at 
javax.swing.SystemEventQueueUtilities$ComponentWorkRequest.run(SystemEventQueueUtilities.java:
117)
        at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:178)
        at java.awt.EventQueue.dispatchEvent(EventQueue.java:454)
        at java.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:234)
        at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:184)
        at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:178)
        at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:170)
        at java.awt.EventDispatchThread.run(EventDispatchThread.java:100)
apple.awt.EventQueueExceptionHandler Caught Throwable : 
java.lang.ArrayIndexOutOfBoundsException: Cannot get selection index 0, list size 0
        at 
com.odellengineeringltd.glazedlists.listselectionmodel.SelectionModelEventList$EventListSelectionMode
l.isSelectedIndex(SelectionModelEventList.java:505)
        at javax.swing.JTable.isRowSelected(JTable.java:1451)
        at javax.swing.JTable.isCellSelected(JTable.java:1481)
        at javax.swing.JTable.prepareRenderer(JTable.java:3725)
        at javax.swing.plaf.basic.BasicTableUI.paintCell(BasicTableUI.java:1149)
        at javax.swing.plaf.basic.BasicTableUI.paintCells(BasicTableUI.java:1051)
        at javax.swing.plaf.basic.BasicTableUI.paint(BasicTableUI.java:974)
        at javax.swing.plaf.ComponentUI.update(ComponentUI.java:142)
        at javax.swing.JComponent.paintComponent(JComponent.java:541)
        at javax.swing.JComponent.paint(JComponent.java:808)
        at javax.swing.JComponent.paintChildren(JComponent.java:647)
        at javax.swing.JComponent.paint(JComponent.java:817)
        at javax.swing.JViewport.paint(JViewport.java:774)
        at javax.swing.JComponent.paintChildren(JComponent.java:647)
        at javax.swing.JComponent.paint(JComponent.java:817)
        at javax.swing.JComponent._paintImmediately(JComponent.java:4695)
        at javax.swing.JComponent.paintImmediately(JComponent.java:4488)
        at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:410)
        at 
javax.swing.SystemEventQueueUtilities$ComponentWorkRequest.run(SystemEventQueueUtilities.java:
117)
        at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:178)
        at java.awt.EventQueue.dispatchEvent(EventQueue.java:454)
        at java.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:234)
        at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:184)
        at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:178)
        at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:170)
        at java.awt.EventDispatchThread.run(EventDispatchThread.java:100)</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-02-23 15:17:31</issue_when>
   <thetext>The lists can get out of sync while changes are pending in the event queue. The ListSelectionModel 
must not throw an exception because it is possible that the lists are simply out of sync and that when 
the event queue is processed they will come back into sync.

This has been fixed so that the SelectionModel does not throw an exception in the possiblility that the 
lists are simply out of sync.

One unfortunate side effect is that the ListSelectionModel now cannot provide warning as to whether 
this method is actually being called in error.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-09 16:39:07</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-23 15:17:31</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-02-23 15:17:31</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-09 16:39:07</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>18</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040404144944</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-03-08 14:53:47</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>set(), add(), remove() etc. not implemented</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-08 14:53:47</issue_when>
   <thetext>Glazed Lists does not support remove() on FilterLists. It simply throws an Exception.

Glazed Lists should support remove(). It should also support set().

To provide protection, there should be a MutationList called ReadOnlyList that throws an exception 
upon a remove() or a set.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-09 08:46:37</issue_when>
   <thetext>The following methods that modify lists should be implemented: set(), add(), remove() and clear().

Implementing these is not straightforward because we want to modify the model indirectly by calling 
these methods upon the view. Here are some observations:

BasicEventList:
Already supports modifying methods.

QueryList:
Not directly modifyable. Objects created or modified externally can currently be updated via 
notifyObjectUpdated(). This is appropriate.

SortedList:
Methods called with an index such as set(index, value) and add(index, value) will have unpredictable 
results. This is because the modified/inserted objects may be sorted into a different index than that 
specified. This is acceptable but should be documented.

FilteredList:
The add(index, value) method is ambiguous. This is because there may be several filtered-out indicies 
in the source list that will have the same filtered index. I think the best approach is to insert at the 
highest index that will satisfy the specified index.
The add() and set() methods may cause an object to become filtered. This is acceptable but should be 
documented.

FreezableList:
Changes may do different things in different states. This is nonintuitive and could be 
troublesome. For example, when a list is frozen changes can only applied to a local copy. When the list 
is not frozen changes should propagate to parente lists. Therefore I recommend that changes are only 
allowed in the not frozen state. Otherwise an IllegalStateException should be thrown.

SelectionList:
This is not clearly defined. It may be intuitive that remove() either removes the selection or that 
remove() actually removes an element from the source list. But add() can only add an element to the 
source list because it is unnatural to use add() to perform selection by value and not index. Therefore 
add() and remove() will modify the source list.

MutationList:
This should continue to throw MethodNotSupportedException for mutator methods. It may be desirable 
to make some methods use others such as clear() calling remove() in sequence in order to simplify 
writing extending classes.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-12 09:06:50</issue_when>
   <thetext>Daniel Bonin and I were discussing modifyable views and we came up with some observations. When 
using FilterList, SortedList or the like, you can have inconsistent behaviour. For example, the following 
code wil fail.

list x = ...
x.add(0, "Jesse");
assert("Jesse".equals(x.get(0));

This can fail because the inserted value "Jesse" gets filtered out or sorted to a different location.

Our solution: a happy list. The happy list "fakes" success as the method directed. It basically keeps 
track of local changes to make the changes appear consistent. This can be used with GUIs to allow the 
user to verify their modifications without losing the filtering and sorting. 

The happy list will be called "DeltaList" and it will keep track of both the source list and a set of deltas 
that have been performed. When an insert at x occurs, the delta list simulates that the insert occured at 
x, even if the insert was sorted or filtered to a different location.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-15 12:11:59</issue_when>
   <thetext>I have created a new class "WritableMutationList" that provides these services to lists that extend it. It 
requires that lists implement two additional methods:
 - isWritable() returns true if the list is accepting changes at this time
 - getSourceIndex() gets the index from the source list for the corresponding index in the mutated list

This requires that there is a 1:1 correspondence between indicies in the mutated list and the indicies in 
the source list. This will not work for lists that combine source values in the mutated view.

To complete the fix, I must implement a ReadOnlyList mutated list and a DeltaList. I will also need to do 
a bunch of testing to verify that this works.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-15 12:51:43</issue_when>
   <thetext>I've added a ReadOnlyList - now all that's left is DeltaList.

...And LOTS of testing!</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-18 15:07:46</issue_when>
   <thetext>I added test methods to SortedList and CaseInsensitiveFilterList and have gained confidence in my 
implementation of the set(), add(), remove(), clear() etc. methods.

The DeltaList has been moved to a separate issue, issue 24.
https://glazedlists.dev.java.net/issues/show_bug.cgi?id=24</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-04 14:49:44</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-09 08:46:37</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-09 08:46:37</when>
    <field_name>short_desc</field_name>
    <field_desc>Summary</field_desc>
    <oldvalue>remove() not implemented</oldvalue>
    <newvalue>set(), add(), remove() etc. not implemented</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-18 15:07:46</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-18 15:07:46</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-04 14:49:44</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>19</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P3</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040309085347</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>FEATURE</issue_type>
  <creation_ts>2004-03-09 08:53:47</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Glazed lists on the network</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-09 08:53:47</issue_when>
   <thetext>As documented in the developer newsgroup, I want to build a model that allows list changes to be 
distributed across the network.

https://glazedlists.dev.java.net/servlets/ReadMsg?list=dev&amp;msgNo=11
https://glazedlists.dev.java.net/servlets/ReadMsg?list=dev&amp;msgNo=12

I will create a descrete event simulation model in order to test out what network strategies are most 
effective. Also I think that this package should be implemented exclusively using the buffered java.nio 
package if possible.</thetext>
  </long_desc>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>20</issue_id>
  <issue_status>RESOLVED</issue_status>
  <priority>P5</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040602230950</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-03-09 09:12:58</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Refactor package and class names</short_desc>
  <keywords></keywords>
  <blocks>41</blocks>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-09 09:12:58</issue_when>
   <thetext>These changes make the code easier for new users at the expense of requiring existing users to change 
their imports. Therefore the changes should be made very carefully. If possible a tool should be 
referenced to automatically convert .java files for existing users.

First off, com.odellengineeringltd.glazedlists is a mouthful. This should be changed to O'Dell 
Engineering's new standard package, ca.odell.glazedlists.

...glazedlists.listselectionmodel should be renamed to ...glazedlists.selection.

In ...glazedlists.jtable:
  ListTable should be EventJTable
  SelectionListener should be moved to ...glazedlists.selection
  BasicSelectionListener should be moved to ...glazedlists.selection

Finally the following classes should be verified working or removed:
...glazedlists.jtextfield.ArrayStringCompleter
...glazedlists.jtextfield.CompletedField
...glazedlists.jtextfield.ComponentCaution
...glazedlists.jtextfield.ListStringCompleter
...glazedlists.jtextfield.StringCompleter
...glazedlists.jtextfield.ValidatedField
...glazedlists.jtable.StyledDocumentEditor
...glazedlists.jtable.WritableListTable
...glazedlists.jtable.WritableTableFormat
...glazedlists.query.QueryListManager

As I have already said, these changes will ruin Glazed Lists programs. Therefore all Glazed Lists users 
should be notified before making any changes and copies of the Glazed Lists jar file and source should 
be permanently archived for users with these packages.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-21 10:05:08</issue_when>
   <thetext>When I fix this bug I will be breaking compatibility. Other compatibility-breaking changes should all be 
performed at the exact same time.

Another compatibility-breaking change is changing the concurrency strategy. The current strategy uses 
simple global synchronization, where a better solution will use Reader/Writer locks. This will be 
necessary to resolve Issue 25.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-17 17:48:07</issue_when>
   <thetext>Here's my current ideas on what to do with each class. My goal is to simplify Glazed Lists by removing 
everything that is not essential. 

AbstractFilterList - ok
ArrayStringCompleter - remove, this class is not within the scope of the project
BasicEventList - ok
BasicSelectionListener - remove, this class is simple in implementation and limited in use
BoundedMap - remove, this class is no longer used
CachingList - ok
CaseInsensitiveFilterList - SubstringFilterList, have case toggle options
CharacteristicList - rename ?
ComparableComparator - ok
ComparatorChain - ok
CompletedField - remove, not within scope
ComponentCaution - remove, not within scope
CompositeList - ok
DynamicQueryList - replace with a different 'query' list that does not use the Query class, just a 
setCollection() method
EmptyQuery - remove
EventJList - replace with a EventListModel
EventList - ok
EventListIterator - ok
ExitOnCloseHandler - remove, not in scope
Filterable - remove? Filterator only may be a better approach
Filterator - rename TextFilterator
FreezableList - ok
IconComboBoxRenderer - remove, not within scope
IndexedTree - ok
IndexedTreeNode - ok
ListChangeBlock - make package-scope, move constants DELETE, INSERT to ListChangeEvent class
ListChangeEvent - ok, add methods to get the source list and target listener
ListChangeListener - ok, change notifyListChanges to listChanged
ListChangeListenerEventThreadProxy - ok
ListChangeListenerWeakReferenceProxy - ok
ListChangeSequence - ok, maybe rename to ListChangeEventHelper or something
ListComboBoxModel - ok
ListStringCompleter - remove, out of scope
ListTable - replace with EventListTableModel
MutableListDataEvent - ok, make package-scope
MutableTableModelEvent - ok, make package-scope
MutationList - rename. the renamed list could be "DecoratorList" or something else
PeriodicQueryList - remove, see DynamicQueryList
ProgrammingLanguageBrowser - ok
ProgrammingLanguageNameComparator  - ok
ProgrammingLanguageTableCell  - ok
ProgrammingLanguageYearComparator  - ok
Query - remove, see DynamicQueryList
QueryList - replace as per DynamicQueryList
QueryListManager - remove
ReadOnlyList - ok
ReverseComparator - ok
SelectionList - remove
SelectionListener - ok? maybe remove due to models, consider more flexible selection events
SelectionModelEventList - ok
SelectionNotifier - package private
SortedList - ok
SparseList - ok
StringCompleter - remove
StripedTableCellRenderer - not really in scope, but keep it anyway
StyledDocumentEditor - remove
StyledDocumentRenderer - not really in scope, but keep it anyway, adjust built-in forms
SubEventList - ok
TableComparatorChooser - ok
TableComparatorSelector - remove
TableFormat - rename um TableColumnFormat maybe? remove configureTable for new model-
approach
TaskQueryList - remove, see DynamicQueryList
UniqueList - ok
ValidatedField - remove
WritableListTable - replace with methods in TableFormat
WritableMutationList - remove, replace with more powerful MutationList
WritableTableFormat - remove
</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-27 10:42:05</issue_when>
   <thetext>Some other things I think we should go over for this issue:
 - verify standard copyright header
 - classes should be final

To reduce the number of visible classes and therefore simplify Glazed Lists:
 - all *List classes should be in the main package
 - no support classes should be public
 - Swing classes in swing package
</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-27 11:14:21</issue_when>
   <thetext>Two other things I thought of to verify:
 - imports are clean &amp; straightforward &amp; necessary
 - there is a thread-safety warning in Javadoc for all thread-unsafe classes</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-02 23:09:50</issue_when>
   <thetext>NEVER AGAIN</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-17 17:48:07</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:34:50</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue></oldvalue>
    <newvalue>41</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-02 23:09:50</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-02 23:09:50</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>21</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040415131149</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-03-15 09:20:50</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>SubList not implemented</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-15 09:20:50</issue_when>
   <thetext>SubList should be implemented. This should be an MutationList on its own, that starts with the initial 
size and accepts add() and remove() from source list.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-16 15:32:26</issue_when>
   <thetext>Implementing SubList as an EventList in its own right will introduce a subtle problem:

The SubList should listen to events from its source list and change itself accordingly. But if the SubList 
is to listen for such events, it must be registered as a ListChangeListener of the source list.

Because the SubList is a ListChangeListener, the source list will always maintain a reference to the 
SubList and the SubList will never go out of scope. Therefore the SubList will never be garbage collected 
and waste memory space.

The work around is to require EventLists to accept two classes of ListChangeListeners - those that 
should be garbage collected once they go out of the scope from the caller and those that should not be 
garbage collected. In effect there should be ListChangeListeners that are stored with weak references 
and those that have regular references.

I would prefer not to change the interface for EventList or ListChangeListener, so it will be tricky to 
determine whether to reference a listener with a weak reference or a regular reference. One solution 
create a proxy class called "WeakReferenceListChangeListenerProxy" that sends changes using a weak 
reference only. This is similar to the SwingThreadProxy already in use in Glazed Lists.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-25 14:37:27</issue_when>
   <thetext>SubList is added and appears to be working.

I still need to perform a test to ensure it is being garbage collected.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-25 19:14:08</issue_when>
   <thetext>Fixed!

The SubList and Iterator now respond to events. Therefore they can be used even if the underlying list 
changes.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-15 13:11:49</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-16 15:32:26</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-25 19:14:08</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-25 19:14:08</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-15 13:11:49</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>22</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>kevinmaltby</assigned_to>
  <delta_ts>20040415131217</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-03-15 11:07:20</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>CachingList dumps all values whenever the list is changed</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-15 11:07:20</issue_when>
   <thetext>The CachingList will be of growing importance as Glazed Lists are used on the network.

The current implementation of CachingList dumps the entire cache whenever any changes to the list 
occur. The CachingList should only dump values which have been invalidated.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-18 15:30:06</issue_when>
   <thetext>The current CachingList keeps track of what is in its cache by its list index. When the list is modified, 
these list indicies may change and therefore it is necessary to invalidate the entire cache.

In order to fix the CachingList, it will be necessary to change the data structures that support it. This fix 
will be difficult to build!

I am considering allowing this defect to exist in the 1.0 release as it is only a performance problem and 
not a behavioural problem.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-24 17:31:31</issue_when>
   <thetext>I'm assigning this to Kevin Maltby - the best coder I know when caching is concerned. Let's hope my 
flattery and his talent are enough to get this bug fixed!</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-31 18:35:57</issue_when>
   <thetext>Kevin has pretty much conquered this one. He's going to CVS commit and close this issue real soon.

I have peer-reviewed his code and it's pretty decent. The peer review session was very helpful and 
hopefully we can get a lot of the Glazed Lists code peer reviewed in the future!</thetext>
  </long_desc>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-03-31 23:46:18</issue_when>
   <thetext>The fix is in.  The CachingList now behaves as you would expect.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-15 13:12:17</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-24 17:31:31</when>
    <field_name>assigned_to</field_name>
    <field_desc>Assigned To</field_desc>
    <oldvalue>issues@glazedlists</oldvalue>
    <newvalue>kevinmaltby</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-31 18:35:57</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-03-31 23:46:18</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-03-31 23:46:18</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-15 13:12:17</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>23</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040408090821</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>TASK</issue_type>
  <creation_ts>2004-03-15 12:15:04</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Add JUnit Support</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-15 12:15:04</issue_when>
   <thetext>As Glazed Lists gets bigger in scope it is becoming very urgent to create a set of unit tests.

There should be a package such as .glazedlists.test that is only compiled if the JUnit libraries are 
detected on the classpath. If they are, then these test files can be built. They can then be tested with a 
"test" target in the project buildfile.

Finally these test classes shall not be included in the library distribution.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-18 09:15:20</issue_when>
   <thetext>I have added the framework for JUnit tests within the Glazed Lists package and build file.

Now all I have to do is write the tests!</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-18 14:31:46</issue_when>
   <thetext>I've gone through the code to select which classes are good candidates for unit tests. Unit tests require 
programmatic access so testing Swing stuff will be of marginal value.

package: .glazedlists
AbstractFilterList
BasicEventList
CaseInsensitiveFilterList
SortedList
WritableMutationList

package: .glazedlists.listselectionmodel
SelectionModelEventList

package: .glazedlists.util
BoundedMap
CachingList
EventListIterator
FreezableList
IndexedTree
ReadOnlyList
SparseList

As of March 18, 2004 I have created tests for the CaseInsensitiveFilterList and the SortedList.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-21 10:16:32</issue_when>
   <thetext>The most basic classes now have tests for them.

Some tests are not appropriate for JUnit, for example, concurrency tests.

Regardless, JUnit support is now in the Glazed Lists project. It is possible to add new tests by simply 
creating a class that ends with Test.java. In fact, Glazed Lists now requires that classes ending in 
Test.java must be JUnit tests as such classes are NOT included in the distribution jar.

Anyone interested in getting their hands dirty with Glazed Lists should consider adding more tests to 
our test library!</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-08 09:08:21</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-18 09:15:20</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-21 10:16:32</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-21 10:16:32</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 09:08:21</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>24</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P5</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040414174648</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>FEATURE</issue_type>
  <creation_ts>2004-03-18 15:07:01</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Add DeltaList for consistency with derivatives of WritableMutationList</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-18 15:07:01</issue_when>
   <thetext>WritableMutationLists allow modifications to be made to the list that may behave differently than 
expected. The solution is to implement a DeltaList, which is a mutation list that provides as-expected 
results when they would not otherwise be possible.

From issue 18:

Daniel Bonin and I were discussing modifyable views and we came up with some observations. When 
using FilterList, SortedList or the like, you can have inconsistent behaviour. For example, the following 
code wil fail.

list x = ...
x.add(0, "Jesse");
assert("Jesse".equals(x.get(0));

This can fail because the inserted value "Jesse" gets filtered out or sorted to a different location.

Our solution: a happy list. The happy list "fakes" success as the method directed. It basically keeps 
track of local changes to make the changes appear consistent. This can be used with GUIs to allow the 
user to verify their modifications without losing the filtering and sorting. 

The happy list will be called "DeltaList" and it will keep track of both the source list and a set of deltas 
that have been performed. When an insert at x occurs, the delta list simulates that the insert occured at 
x, even if the insert was sorted or filtered to a different location.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-14 17:46:48</issue_when>
   <thetext>priority reduced as there is no 'customers' waiting for this feature.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-14 17:46:48</when>
    <field_name>priority</field_name>
    <field_desc>Priority</field_desc>
    <oldvalue>P3</oldvalue>
    <newvalue>P5</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>25</issue_id>
  <issue_status>STARTED</issue_status>
  <priority>P3</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040611154420</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-03-19 14:44:50</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>CompositeList not thread-safe</short_desc>
  <keywords></keywords>
  <dependson>26</dependson>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-19 14:44:50</issue_when>
   <thetext>Glazed Lists' new CompositeList combines multiple event lists into one.

This class is not thread-safe. In particular, it may be possible to cause a deadlock when one thread is 
reading the CompositeList while another thread is writing a list that the CompositeList is composed of.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-21 10:10:05</issue_when>
   <thetext>This bug depends on fixing Issue 26. That issue is for adding beefier concurrency constructs to Glazed 
Lists.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-09 14:33:07</issue_when>
   <thetext>After much thought, I have decided my approach to solving this bug.

Here are the things that all solutions must consider:
1. When one of the source lists change, they call notifyListChanges() while holding the writer lock to 
that source list.
2. When a user needs read access to any list including CompositeList, the user acquires a reader lock 
and performs their access. The list must not change during access.
3. If a thread obtains two locks, it must always obtain the locks in the same order as any other thread 
that may hold those two locks. Otherwise deadlock is possible as threads may compete for each other's 
locks.

My initial idea was as follows:
 - Eliminate the need for locking all source lists for each access
 - When a read is performed, lock the local read lock and the read lock on the source list
 - When a write is performed, lock the local write lock and the write lock of the source list
 - When a source list calls notifyListChanges, use the tryLock() method to attempt to obtain the local 
write lock. If it can be obtained propogate the change. If it cannot, return without propogating the 
change. The thread that currently holds a lock is now responsible for propogating that change.

This strategy has many advantages. It has a constant time to acquire locks, and it takes advantage of 
the listEvent's abilities to be read at a later time. Although this avoids deadlock, the problem this 
strategy is that this does not fulfill requirement 2.

Therefore, I will implement a much simpler and potentially slower strategy:
 - for each lock, present a decorator lock that locks all corresponding locks from the source list
 - obtain the locks in a constant order: by the System.hashCode() value of their source list

This solution looks good! The only problem I have with it is that the System.hashCode() value could 
change for an Object over time if it gets moved within memory. I doubt that this will be a problem but it 
is a good thing to keep an eye on.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-10 08:49:00</issue_when>
   <thetext>My initial implementation is complete, but I still need to add a test class to verify that it is thread safe.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-10 16:27:35</issue_when>
   <thetext>After implementing my proposed solution, I tested it and discovered that it was
failing miserably! The solution has a problem that prevents it from being
acceptable. The notifying thread must have a write lock on the entire list to
prevent changes from being made while the listChanged() method is being handled
by listeners. This is requirement #2 and it is not satisfied by that proposal.
Therefore the proposal is insufficient.

Therefore I propose a new solution, somewhat of a hybrid between the two.
i. Read lock on composite list obtains the read locks of all source lists in
arbitrary order
ii. Write lock on composite list is a special ReadWriteLock called
"PropagateLock" plus the read locks of all source lists.
iii. Upon a change notification in the composite list, that thread tests if the
propagateLock is locked. If it is, it leaves its changes to be propogated by the
thread that currently owns the propogate lock. If that lock is unlocked, the
thread takes the propogate lock and then all read locks in arbitrary order. It
then concatenates its own changes with any changes left while it was collecting
locks. Finally it propagates the concatenated change while holding the propogate
lock, read locks to all source lists, and the original write lock for one source
list.

This combined lock includes the "writer lock" for this list, satisfying
requirement #1. 
The reader lock is a hybrid lock that holds all other read locks, preventing
changes while reading. This satisfies requirement #2.
The reader locks need not be mutex with one another so that solves part of #3.
For writer locks, a thread's 2nd lock is always the propogate lock, and it fails
if that lock is not available immediately, solving another part of #3. Finally,
no thread acquires write locks after owning a first read lock, finishing up the
final area of concern for requirement #3.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-11 11:38:19</issue_when>
   <thetext>Yet again, I have presented a solution that failed in practice. Here is the problem with my most recent 
solution:

Suppose you have two writer threads, A and B that write to source lists Apples and Bananas. There is 
also a reader thread C that reads the composite list of A and B called "FruitSalad".

1. A creates an event in Apples and acquires the write lock to Apples. A = { WL(Apples) }
2. C wants to read the fruit salad and requests a read lock. By the provided implementation, this causes 
C to obtain read locks to each of the two lists Apples and Bananas in arbitrary order. C aquires the read 
lock to Bananas and requests the read lock to Apples, which blocks because A currently holds that lock. 
C = { RL(Bananas), REQUEST(RL(Apples)) }
3. B wants to create an event in Bananas and requests the write lock to Bananas. This blocks because C 
currently holds that lock. B = { REQUEST(WL(Bananas)) }
4. A forwards its event to FruitSalad, regarding its change to Apples. A attempts to acquire the read 
locks to all lists in FruitSalad in order to forward this event. When attempting to acquire the read lock to 
Bananas, this request is blocked because there is a waiting request for the write lock to Bananas by B. 
Therefore A = { WL(Apples), REQUEST(RL(Bananas)) }

As you can see, all of the lists are awaiting requests held by each other and we have a deadlock. This 
sucks! I do not think it is appropriate to change the preferences on the lock orders because doing so 
may severely limit the original concurrency goals of Glazed Lists.

For now, I will continue to ponder a better solution. </thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-11 15:44:20</issue_when>
   <thetext>Created an attachment (id=2)
My request for help on Usenet
</thetext>
  </long_desc>
  <attachment encoding="Base64">
    <mimetype>text/html</mimetype>
    <attachid>2</attachid>
    <date>2004-06-11 15:44:20</date>
    <desc>My request for help on Usenet</desc>
    <ispatch></ispatch>
    <filename>askforhelp.html</filename>
    <submitter_id>3</submitter_id>
    <submitting_username>jessewilson</submitting_username>
    <data>DQoNCg0KDQo8aHRtbD48aGVhZD48bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRl
bnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj48dGl0bGU+R29vZ2xlIEdyb3VwcyBQ
b3N0aW5nPC90aXRsZT48L2hlYWQ+DQo8bGluayByZWw9InN0eWxlc2hlZXQiIHRpdGxlPSJHb29n
bGUgaGFzIHN0eWxlIiBocmVmPSJodHRwOi8vd3d3Lmdvb2dsZS5jb20vZ29vZ2xlX25vbmF2LmNz
cyI+DQo8Ym9keSBhTGluaz0jZmYwMDAwIGJnQ29sb3I9I2ZmZmZmZiBsaW5rPSMwMDAwY2MgdGV4
dD0jMDAwMDAwIHZMaW5rPSM1NTFhOGI+DQoNCjx0YWJsZSBib3JkZXI9MCBjZWxsUGFkZGluZz0y
IGNlbGxTcGFjaW5nPTA+PHRyPjx0ZCB2QWxpZ249dG9wIHJvd3NwYW49Mz4NCjxhIGhyZWY9Imh0
dHA6Ly9ncm91cHMuZ29vZ2xlLmNvbS8iPjxpbWcgYWx0PSJHb29nbGUiIGJvcmRlcj0wIGhlaWdo
dD01OSB3aWR0aD0xNDMgc3JjPSJodHRwOi8vZ3JvdXBzLmdvb2dsZS5jb20vaW1hZ2VzL2dyb3Vw
c19iZXRhX3NtLmdpZiI+PC9hPjwvdGQ+DQo8dGQgd2lkdGg9IjEwMCUiIGFsaWduPXJpZ2h0Pjxh
IGhyZWY9Imh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vYWNjb3VudHMvTWFuYWdlQWNjb3VudD9jb250
aW51ZT1odHRwJTNBJTJGJTJGZ3JvdXBzLmdvb2dsZS5jb20lMkZncm91cHMlM0ZobCUzRGVuJTI2
bHIlM0RsYW5nX2VuJTI2aWUlM0RVVEYtOCUyNmdyb3VwJTNEY29tcC5sYW5nLmphdmEuZGV2ZWxv
cGVyIj5NeSBhY2NvdW50PC9hPiAtIDxhIGhyZWY9Ii9wb3N0P2NtZD1sb2dvdXQiPlNpZ24gb3V0
PC9hPjwvdGQ+PC90cj48L3RkPjwvdHI+DQo8dHI+PHRkIGJnQ29sb3I9I2ZmY2MzMyB3aWR0aD0i
MTAwJSI+PEZPTlQgZmFjZT1hcmlhbCxzYW5zLXNlcmlmPjxiPlBvc3QgYSBNZXNzYWdlPC9iPjwv
Rk9OVD48L3RkPjwvdHI+DQo8dHI+PHRkIHdpZHRoPSIxMDAlIiBhbGlnbj1yaWdodD48YSBocmVm
PSJodHRwOi8vZ3JvdXBzLmdvb2dsZS5jb20vZ3JvdXBzP2hsPWVuJmxyPWxhbmdfZW4maWU9VVRG
LTgmZ3JvdXA9Y29tcC5sYW5nLmphdmEuZGV2ZWxvcGVyIj4mbHQ7Jmx0OyBSZXR1cm4gdG8gR29v
Z2xlIEdyb3VwczwvYT48L3RkPjwvdHI+PC90YWJsZT4NCg0KPHA+DQoNCjxmb250IGZhY2U9ImFy
aWFsLHNhbnMtc2VyaWYiPjxiPllvdXIgbWVzc2FnZSBoYXMgYmVlbiBwb3N0ZWQ8L2I+PC9mb250
Pg0KDQo8cD5Zb3VyIG1lc3NhZ2UgaGFzIGJlZW4gcG9zdGVkIHRvIFVzZW5ldC4NClBsZWFzZSBu
b3RlIHRoYXQgaXQgbWF5IHRha2UgPGI+YW55d2hlcmUgZnJvbSAzIHRvIDkgaG91cnM8L2I+IGZv
ciB5b3VyIG1lc3NhZ2UNCnRvIGFwcGVhciBvbiBHb29nbGUgR3JvdXBzLg0KVGhlIHRleHQgb2Yg
eW91ciBtZXNzYWdlIGlzIGluY2x1ZGVkIGJlbG93IGZvciB5b3VyIGNvbnZlbmllbmNlLg0KPHA+
DQo8YSBocmVmPSJodHRwOi8vZ3JvdXBzLmdvb2dsZS5jb20vZ3JvdXBzP2hsPWVuJmxyPWxhbmdf
ZW4maWU9VVRGLTgmZ3JvdXA9Y29tcC5sYW5nLmphdmEuZGV2ZWxvcGVyIj5SZXR1cm4gdG8gR29v
Z2xlIEdyb3VwczwvYT4NCjxwPg0KPGhyPg0KPHByZT4NCkZyb206IGplc3NlQHN3YW5rLmNhIChK
ZXNzZSBXaWxzb24pDQpOZXdzZ3JvdXBzOiBjb21wLmxhbmcuamF2YS5kZXZlbG9wZXINClN1Ympl
Y3Q6IFRyaWNreSBSZWFkV3JpdGVMb2NrICZhbXA7IExpc3RlbmVyIHByb2JsZW0NCk5OVFAtUG9z
dGluZy1Ib3N0OiAyMDkuMTY3LjE3Ny4xNjQNCk1lc3NhZ2UtSUQ6ICZsdDs1NjE4NDI2OC4wNDA2
MTExNDQyLjU1YjY1OWE3QHBvc3RpbmcuZ29vZ2xlLmNvbSZndDsNCg0KSSBhbSB3b3JraW5nIG9u
IGZpeGluZyBhIGJ1ZyBmb3IgbXkgb3Blbi1zb3VyY2UgSmF2YSBsaXN0cyBsaWJyYXJ5LA0KR2xh
emVkIExpc3RzLiBJIG5lZWQgdG8gYWRkIGNvbmN1cnJlbmN5IHN1cHBvcnQgdG8gYSBjbGFzcyBh
bmQgSSBoYXZlDQpoYWQgYSBsb3Qgb2YgdHJvdWJsZSBjb21pbmcgdXAgd2l0aCBhIHNvbHV0aW9u
Lg0KDQoNCkEgcXVpY2sgc3VtbWFyeSBvZiBHbGF6ZWQgTGlzdHMNCkV2ZW50TGlzdCBpcyBhbiBp
bnRlcmZhY2UgdGhhdCBleHRlbmRzIGphdmEudXRpbC5MaXN0IHRoYXQgYWRkcyBjaGFuZ2UNCmxp
c3RlbmVycyBhbmQgcmVhZC93cml0ZSBsb2Nrcy4gVGhlIGlkZWEgaXMgdGhhdCB5b3UgY2FuIGhh
dmUgYQ0KcHJvZHVjZXIgc3VjaCBhcyBhIGRhdGFiYXNlIHF1ZXJ5IGRhZW1vbiB0aGF0IG1ha2Vz
IGNoYW5nZXMgdG8gdGhpcw0KbGlzdCwgYW5kIGEgY29uc3VtZXIgc3VjaCBhcyBhIEpUYWJsZSB0
aGF0IHZpZXdzIHRoZSBjaGFuZ2VzLiBZb3UgY2FuDQphbHNvIGhhdmUgcHJvZHVjZXIvY29uc3Vt
ZXJzIHRoYXQgc2l0IGluIGEgY2hhaW4gYW5kIHByb3ZpZGUgYQ0KdHJhbnNmb3JtZWQgdmlldyBv
ZiB0aGVpciBzb3VyY2UgbGlzdC4gRm9yIGV4YW1wbGUsIHlvdSBjb3VsZCBoYXZlIGENCnNvdXJj
ZSBsaXN0LCBhIHNvcnRlZCB0cmFuc2Zvcm1hdGlvbiwgYSBmaWx0ZXJlZCB0cmFuc2Zvcm1hdGlv
biwgYW5kDQp0aGVuIGEgSlRhYmxlLiBFYWNoIGxpc3QgaW4gdGhpcyBjaGFpbiBoYXMgdGhlIGlu
dGVyZmFjZSBtZXRob2QNCmdldFJlYWRXcml0ZUxvY2soKSB3aGljaCBpcyB1c2VkIHRvIHByb3Zp
ZGUgdGhyZWFkIHNhZmUgYWNjZXNzLiBGb3INCmZ1bGwgZGV0YWlscywgcGxlYXNlIGRvd25sb2Fk
IHRoZSAwLjkgcmVsZWFzZSBhdA0KaHR0cHM6Ly9nbGF6ZWRsaXN0cy5kZXYuamF2YS5uZXQvDQoN
Cg0KVGhlIGdvYWwNCkkgYW0gY3JlYXRpbmcgYSBuZXcgbGlzdCAmcXVvdDtDb21wb3NpdGVMaXN0
JnF1b3Q7IHRoYXQgY29tYmluZXMgbXVsdGlwbGUgc291cmNlDQpldmVudCBsaXN0cyBpbnRvIGEg
c2luZ2xlIGV2ZW50IGxpc3QuIFRoaXMgd291bGQgYmUgdXNlZnVsIGlmIHlvdSBoYWQNCnNheSBO
IHRocmVhZHMgY29sbGVjdGluZyBkYXRhIGZyb20gTiByZXNwZWN0aXZlIHNvdXJjZXMsIGFuZCB5
b3UNCndhbnRlZCB0byBjb21iaW5lIHRoZSByZXN1bHRzIGluIG9uZSBKVGFibGUuDQoNCg0KVGhl
IHByb2JsZW0NCkkgYW0gaGF2aW5nIGEgbG90IG9mIGRpZmZpY3VsdHkgaW1wbGVtZW50aW5nIGxv
Y2tpbmcgZm9yIHRoZQ0KQ29tcG9zaXRlTGlzdC4gSGVyZSBhcmUgbWFpbiByZXF1aXJlbWVudHM6
DQoxLiBXaGVuIGZvcndhcmRpbmcgYSBjaGFuZ2UgZXZlbnQgZnJvbSBhIHNvdXJjZSBsaXN0IHRv
IGxpc3RlbmVycyBvZg0KdGhlIENvbXBvc2l0ZUxpc3QsIHRoZSBmb3J3YXJkaW5nIHRocmVhZCBt
dXN0IGhvbGQgYSBSZWFkTG9jayBmb3IgdGhlDQp3aG9sZSBDb21wb3NpdGVMaXN0LiBUaGlzIGVz
c2VudGlhbGx5IHJlcXVpcmVzIHRoYXQgdGhlIGZvcndhcmRpbmcNCnRocmVhZCBtdXN0IGhvbGQg
b25lIFJlYWRMb2NrIGZvciBlYWNoIG9mIHRoZSBzb3VyY2UgbGlzdHMgdGhhdCB0aGUNCkNvbXBv
c2l0ZUxpc3QgaXMgY29tcG9zZWQgb2YuDQoyLiBXaGVuIHJlY2VpdmluZyBhIGNoYW5nZSBldmVu
dCBmcm9tIGEgc291cmNlIGxpc3QsIHRoZSBjYWxsZXIgdGhyZWFkDQp3aWxsIGhvbGQgYSBXcml0
ZUxvY2sgZm9yIHRoYXQgc291cmNlIGxpc3QuDQozLiBBbGxvdyBhbiBhcmJpdHJhcnkgbnVtYmVy
IG9yIHNvdXJjZSBsaXN0cyBmb3IgZWFjaCBDb21wb3NpdGVMaXN0LA0KYW4gYXJiaXRyYXJ5IG51
bWJlciBvZiByZWFkZXJzIGZvciBlYWNoIENvbXBvc2l0ZUxpc3QsIGFuZCBmb3IgYW4NCmFyYml0
cmFyeSBudW1iZXIgb2YgQ29tcG9zaXRlTGlzdHMgdG8gYmUgY29tcG9zZWQgZnJvbSB0aGUgc2Ft
ZSBzZXQgb2YNCnNvdXJjZSBsaXN0cy4NCjQuIE5vIGRlYWRsb2NrcyENCg0KU29tZSBmYWlsZWQg
YXBwcm9hY2hlcw0KSSBoYXZlIGhhZCBzb21lIGNsZXZlciBpZGVhcyBidXQgdGhleSBoYXZlIGZh
aWxlZC4gVGhlIGZvbGxvd2luZw0KYXBwcm9hY2hlcyBoYXZlIGZhaWxlZCBhbmQgSSBoYXZlIGRv
Y3VtZW50ZWQgdGhlIGZhaWx1cmVzIGluIHRoZSBidWcNCnRyYWNrZXIgb24gamF2YS5uZXQ6DQpo
dHRwczovL2dsYXplZGxpc3RzLmRldi5qYXZhLm5ldC9pc3N1ZXMvc2hvd19idWcuY2dpP2lkPTI1
DQpBbGwgb2YgdGhlc2UgYXJlIGFwcHJvYWNoZXMgaW4gd2hhdCB0byBkbyB3aGVuIHJlY2Vpdmlu
ZyBhbiBldmVudCBmcm9tDQphIHNpbmdsZSBzb3VyY2UgbGlzdC4gV2UgbXVzdCBvYnRhaW4gYSBy
ZWFkZXIgbG9jayBmb3IgYWxsIG90aGVyDQpzb3VyY2UgbGlzdHMgYW5kIGZvcndhcmQgdGhlIGV2
ZW50IGRvd25zdHJlYW0uDQoNCkZhaWxlZCBBcHByb2FjaCAxOiBEZWxlZ2F0ZSB0byBhIGxpc3Qg
b2YgbG9ja3MNCjEuIFdoZW4gdGhlIHVzZXIgYXNrcyB0byBsb2NrIHRoZSByZWFkIGxvY2sgb24g
dGhlIENvbXBvc2l0ZUxpc3QsIHRoYXQNCndpbGwgbG9jayB0aGUgcmVhZCBsb2NrIG9uIGFsbCB0
aGUgc291cmNlIGxpc3RzIG9mIHRoZSBDb21wb3NpdGVMaXN0Lg0KMi4gV2hlbiB0aGUgdXNlciBh
c2tzIHRvIGxvY2sgdGhlIHdyaXRlIGxvY2sgb24gdGhlIENvbXBvc2l0ZUxpc3QsDQp0aGF0IHdp
bGwgbG9jayB0aGUgd3JpdGUgbG9jayBvbiBhbGwgdGhlIHNvdXJjZSBsaXN0cyBvZiB0aGUNCkNv
bXBvc3RlTGlzdC4NCg0KVGhpcyBhcHByb2FjaCBmYWlscyBiZWNhdXNlIHdlIGNvdWxkIGhhdmUg
dHdvIHNvdXJjZSBsaXN0cyBBIGFuZCBCLA0KYW5kIHR3byBDb21wb3NpdGVMaXN0cyBBQiBhbmQg
QkEuIElmIEEgYW5kIEIgYXJlIHVwZGF0ZWQNCnNpbXVsdGFuZW91c2x5LCB0aGVuIEFCIGhhcyBs
b2NrIEEgYW5kIHRyaWVzIGZvciBsb2NrIEIgYW5kIEJBIGhhcw0KbG9jayBCIGFuZCB0cmllcyBm
b3IgbG9jayBBLiBUaGV5IGhhdmUgZWFjaCBvdGhlcidzIGxvY2sgYW5kIGVuZCB1cA0KZGVhZGxv
Y2tpbmcuDQoNCg0KRmFpbGVkIEFwcHJvYWNoIDI6IFJlZmluZW1lbnQgb2YgIzENCk5vdyBhZGQg
YSBtYW5kYXRvcnkgb3JkZXIgdGhhdCBhbGwgQ29tcG9zaXRlTG9ja3Mgb2J0YWluIHRoZWlyIGxv
Y2tzDQppbi4gRm9yIGV4YW1wbGUsIHdlIGNvdWxkIHJlcXVpcmUgJnF1b3Q7YWxwaGFiZXRpY2Fs
JnF1b3Q7IG9yZGVyIGluIHRoZSBwcmV2aW91cw0KY2FzZS4gVGhpcyBzdGlsbCBmYWlscyBzaW5j
ZSB3ZSBhbHJlYWR5IGhhdmUgbG9jayBCIHdoZW4gbGlzdCBCIGlzDQpjaGFuZ2VkIGFuZCB3ZSBj
YW5ub3QgZ2l2ZSBpdCBiYWNrIHNpbmNlIGl0IHdhcyBvYnRhaW5lZCBwcmlvciB0byBvdXINCmxp
c3RlbmVyIG1ldGhvZCBiZWluZyBjYWxsZWQgYW5kIHdpbGwgbm90IGJlIHJlbGVhc2VkIHVudGls
IG91cg0KbGlzdGVuZXIgbWV0aG9kIHJldHVybnMuDQoNCg0KRmFpbGVkIEFwcHJvYWNoIDM6IExl
YXZlIGEgTm90ZQ0KV2hlbiB0aGUgbGlzdGVuZXIgbWV0aG9kIGlzIGNhbGxlZCwgd2UgYWx3YXlz
IGhhdmUgYSBjaGFuZ2UgZXZlbnQgdG8NCnByb3BhZ2F0ZS4gV2UgYWRkIGEgbmV3IGxvY2sgdG8g
b3VyIENvbXBvc2l0ZUxpc3Qgd2hpY2ggSSB3aWxsIGNhbGwNCiZxdW90O1AmcXVvdDsuIFRoaXMg
bG9jayBpcyBvbmx5IHVzZWQgYnkgdGhlIHRocmVhZCB0aGF0IGlzIHByb3BhZ2F0aW5nIG5ld3Mu
IEFzDQpzb29uIGFzIHdlIGhhdmUgYSBjaGFuZ2UgZXZlbnQgdG8gcHJvcGFnYXRlLCB3cml0ZSB0
aGF0IHRvIGEgdG9kbyBsaXN0DQphbmQgdGhlbiB0cnkgdG8gZ2V0IGxvY2sgUC4gSWYgd2UgZ2V0
IFAsIHByb2Nlc3MgZXZlcnl0aGluZyBvbiB0aGUNCnRvZG8gbGlzdC4gVGhlbiByZWxlYXNlIFAg
YW5kIHZlcmlmeSB0aGF0IHRoZSB0b2RvIGxpc3QgaXMgc3RpbGwNCmVtcHR5LiBJZiBpdCBpcyBu
b3QsIHRyeSBnZXR0aW5nIFAgYWdhaW4gYXMgc29tZWJvZHkgaGFzIGxlZnQgb3VyDQp0aHJlYWQg
YSBjaGFuZ2UgZXZlbnQgdG8gcHJvcGFnYXRlLiBJZiB3ZSBjYW5ub3QgZ2V0IFAsIHRoZW4gd2hv
bWV2ZXINCmhhcyBQIHdpbGwgYmUgcmVzcG9uc2libGUgZm9yIHByb3BhZ2F0aW5nIG91ciBldmVu
dCAoaW5zdGVhZCBvZiB1cykNCmFuZCB3ZSBhcmUgZG9uZS4gT25seSBvbmNlIHdlIGhhdmUgUCBk
byB3ZSBhdHRlbXB0IHRvIG9idGFpbiB0aGUNCnJlYWRlciBsb2NrcyBmb3IgYWxsIHNvdXJjZSBs
aXN0cy4NCg0KVW5mb3J0dW5hdGVseSwgdGhpcyBzb2x1dGlvbiBhbHNvIGhhcyBhIHZlcnkgdHJp
Y2t5IGZsYXcuIEhlcmUgaXMgdGhlDQpkZWFsYnJlYWtpbmcgc2l0dWF0aW9uOiBTdXBwb3NlIHlv
dSBoYXZlIHR3byB3cml0ZXIgdGhyZWFkcywgQSBhbmQgQg0KdGhhdCB3cml0ZSB0byBzb3VyY2Ug
bGlzdHMgQXBwbGVzIGFuZCBCYW5hbmFzLiBUaGVyZSBpcyBhbHNvIGEgcmVhZGVyDQp0aHJlYWQg
QyB0aGF0IHJlYWRzIHRoZSBjb21wb3NpdGUgbGlzdCBvZiBBIGFuZCBCIGNhbGxlZCAmcXVvdDtG
cnVpdFNhbGFkJnF1b3Q7Lg0KMS4gQSBjcmVhdGVzIGFuIGV2ZW50IGluIEFwcGxlcyBhbmQgYWNx
dWlyZXMgdGhlIHdyaXRlIGxvY2sgdG8gQXBwbGVzLg0KQSA9IHsgV0woQXBwbGVzKSB9DQoyLiBD
IHdhbnRzIHRvIHJlYWQgdGhlIGZydWl0IHNhbGFkIGFuZCByZXF1ZXN0cyBhIHJlYWQgbG9jay4g
QnkgdGhlDQpwcm92aWRlZCBpbXBsZW1lbnRhdGlvbiwgdGhpcyBjYXVzZXMgQyB0byBvYnRhaW4g
cmVhZCBsb2NrcyB0byBlYWNoIG9mDQp0aGUgdHdvIGxpc3RzIEFwcGxlcyBhbmQgQmFuYW5hcyBp
biBhcmJpdHJhcnkgb3JkZXIuIEMgYXF1aXJlcyB0aGUNCnJlYWQgIGxvY2sgdG8gQmFuYW5hcyBh
bmQgcmVxdWVzdHMgdGhlIHJlYWQgbG9jayB0byBBcHBsZXMsIHdoaWNoDQpibG9ja3MgYmVjYXVz
ZSBBIGN1cnJlbnRseSBob2xkcyB0aGF0IGxvY2suIEMgPSB7IFJMKEJhbmFuYXMpLA0KUkVRVUVT
VChSTChBcHBsZXMpKSB9DQozLiBCIHdhbnRzIHRvIGNyZWF0ZSBhbiBldmVudCBpbiBCYW5hbmFz
IGFuZCByZXF1ZXN0cyB0aGUgd3JpdGUgbG9jaw0KdG8gQmFuYW5hcy4gVGhpcyBibG9ja3MgYmVj
YXVzZSBDIGN1cnJlbnRseSBob2xkcyB0aGF0IGxvY2suIEIgPSB7DQpSRVFVRVNUKFdMKEJhbmFu
YXMpKSB9DQo0LiBBIGZvcndhcmRzIGl0cyBldmVudCB0byBGcnVpdFNhbGFkLCByZWdhcmRpbmcg
aXRzIGNoYW5nZSB0byBBcHBsZXMuDQpBIGF0dGVtcHRzIHRvIGFjcXVpcmUgdGhlIHJlYWQgbG9j
a3MgdG8gYWxsIGxpc3RzIGluIEZydWl0U2FsYWQgaW4NCm9yZGVyIHRvIGZvcndhcmQgdGhpcyBl
dmVudC4gV2hlbiBhdHRlbXB0aW5nIHRvIGFjcXVpcmUgdGhlIHJlYWQgbG9jaw0KdG8gQmFuYW5h
cywgdGhpcyByZXF1ZXN0IGlzIGJsb2NrZWQgYmVjYXVzZSB0aGVyZSBpcyBhIHdhaXRpbmcgcmVx
dWVzdA0KZm9yIHRoZSB3cml0ZSBsb2NrIHRvIEJhbmFuYXMgYnkgQi4gVGhlcmVmb3JlIEEgPSB7
IFdMKEFwcGxlcyksDQpSRVFVRVNUKFJMKEJhbmFuYXMpKSB9DQoNCkFzIHlvdSBjYW4gc2VlLCBh
bGwgb2YgdGhlIGxpc3RzIGFyZSBhd2FpdGluZyByZXF1ZXN0cyBoZWxkIGJ5IGVhY2gNCm90aGVy
IGFuZCB3ZSBoYXZlIGEgZGVhZGxvY2suIFRoaXMgc3Vja3MhIEkgZG8gbm90IHRoaW5rIGl0IGlz
DQphcHByb3ByaWF0ZSB0byBjaGFuZ2UgdGhlIHByZWZlcmVuY2VzIG9uIHRoZSBsb2NrIG9yZGVy
cyBiZWNhdXNlIGRvaW5nDQpzbyBtYXkgc2V2ZXJlbHkgbGltaXQgdGhlIG9yaWdpbmFsIGNvbmN1
cnJlbmN5IGdvYWxzIG9mIEdsYXplZCBMaXN0cy4NCg0KDQpTbyBub3cgSSBhbSBzdHVjayBhbmQg
SSBjYW5ub3QgdGhpbmsgb2YgYSBzb2x1dGlvbi4gSSBhbSBob3BpbmcgdGhlcmUNCmlzIHNvbWUg
bWFzdGVyLXRocmVhZCBndXJ1IG91dCBpbiB1c2VuZXQgd2hvIGhhcyBoYWQgYSBzaW1pbGFyIHBy
b2JsZW0NCm9yIGNvdWxkIHBvaW50IG1lIGluIHRoZSByaWdodCBkaXJlY3Rpb24uIFBsZWFzZSBy
ZXNwb25kIHdpdGggeW91cg0KaWRlYXMgYW5kIHRoYW5rcyENCg0KSmVzc2UgV2lsc29uDQo8L3By
ZT4NCjxocj4NCg0KPHA+DQoNCjxmb250IGZhY2U9ImFyaWFsLHNhbnMtc2VyaWYiPjxjZW50ZXI+
PGEgaHJlZj0iaHR0cDovL2dyb3Vwcy5nb29nbGUuY29tL2dvb2dsZWdyb3Vwcy9wb3N0aW5nX3Rl
cm1zLmh0bWwiPlRlcm1zIGFuZCBDb25kaXRpb25zPC9hPiAtIA0KPGEgaHJlZj0iaHR0cDovL2dy
b3Vwcy5nb29nbGUuY29tL2dvb2dsZWdyb3Vwcy9wb3N0aW5nX3N0eWxlLmh0bWwiPlBvc3Rpbmcg
U3R5bGUgR3VpZGU8L2E+IC0gDQo8YSBocmVmPSJodHRwOi8vZ3JvdXBzLmdvb2dsZS5jb20vZ29v
Z2xlZ3JvdXBzL3Bvc3RpbmdfZmFxLmh0bWwiPlBvc3RpbmcgRkFRPC9hPg0KPHA+PGZvbnQgY29s
b3I9IzZmNmY2Zj6pMjAwMiBHb29nbGU8L2ZvbnQ+PC9jZW50ZXI+PC9mb250Pg0KPC9ib2R5Pjwv
aHRtbD4NCg0KDQo=
</data>
  <attachment_iz_url>https://glazedlists.dev.java.net/nonav/issues/showattachment.cgi/2/askforhelp.html</attachment_iz_url>
  </attachment>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-19 14:44:50</when>
    <field_name>dependson</field_name>
    <field_desc>IssuesThisDependsOn</field_desc>
    <oldvalue></oldvalue>
    <newvalue>26</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-09 14:33:07</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-11 15:44:20</when>
    <field_name>attachments.thedata</field_name>
    <field_desc>Attachment Data</field_desc>
    <oldvalue></oldvalue>
    <newvalue>Created an attachment (id=2)
My request for help on Usenet
</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>26</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040609143533</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-03-21 10:09:09</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Replace global lock with reader/writer locks</short_desc>
  <keywords></keywords>
  <blocks>25</blocks>
  <blocks>41</blocks>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-21 10:09:09</issue_when>
   <thetext>The current Glazed Lists uses global locks for all reads and writes. It would higher performance to use a 
reader/writer lock instead.

The reader/writer lock could be either requested via eventList.getLock().aquireRead() or via 
eventList.aquireReadLock(). I think I prefer using getLock(), which returns an object implementing a 
ReaderWriterLock interface. That way I can easily swap out the lock implementation.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:14:46</issue_when>
   <thetext>We've swapped the global synchronized on root list to global reader writer locks.

We can now replace that with local locks.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:36:17</issue_when>
   <thetext>I am marking this problem as "fixed" and creating a new issue which covers concurrent mutationlist 
modifications.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-09 14:35:33</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-19 14:44:50</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue></oldvalue>
    <newvalue>25</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:14:46</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:34:50</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue>25</oldvalue>
    <newvalue>25,41</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:36:17</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:36:17</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-09 14:35:33</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>27</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>kevinmaltby</assigned_to>
  <delta_ts>20040521142001</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>FEATURE</issue_type>
  <creation_ts>2004-03-22 14:55:29</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>UniqueList not implemented</short_desc>
  <keywords></keywords>
  <dependson>40</dependson>
  <blocks>37</blocks>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-22 14:55:29</issue_when>
   <thetext>Glazed Lists needs a UniqueList that can take two lists and show only the unique values.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-06 14:51:25</issue_when>
   <thetext>Kevin Maltby has got a working implementation! What a stallion!</thetext>
  </long_desc>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-04-07 22:20:22</issue_when>
   <thetext>UniqueLists are now implemented to provide a unique view of a given list.</thetext>
  </long_desc>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-04-11 16:46:07</issue_when>
   <thetext>Jesse Wilson broke it with the addition of the testUpdateDeleteCollide test 
case.

The result of this test was the following Exception...

    [junit] Testcase: testUpdateDeleteCollide(com.odellengineeringltd.glazedlist
s.util.UniqueListTest): Caused an ERROR
    [junit] cannot get from tree of size 1 at 1
    [junit] java.lang.IndexOutOfBoundsException: cannot get from tree of size 1
at 1
    [junit]     at com.odellengineeringltd.glazedlists.util.IndexedTreeNode.getN
odeWithIndex(IndexedTreeNode.java:81)
    [junit]     at com.odellengineeringltd.glazedlists.util.IndexedTree.getNode(
IndexedTree.java:64)
    [junit]     at com.odellengineeringltd.glazedlists.SortedList.get(SortedList
.java:239)
    [junit]     at com.odellengineeringltd.glazedlists.util.UniqueList.get(Uniqu
eList.java:167)
    [junit]     at com.odellengineeringltd.glazedlists.util.UniqueList.processIn
sertEvent(UniqueList.java:259)
    [junit]     at com.odellengineeringltd.glazedlists.util.UniqueList.notifyLis
tChanges(UniqueList.java:209)
    [junit]     at com.odellengineeringltd.glazedlists.event.ListChangeSequence.
commitAtomicChange(ListChangeSequence.java:134)
    [junit]     at com.odellengineeringltd.glazedlists.SortedList.notifyListChan
ges(SortedList.java:146)
    [junit]     at com.odellengineeringltd.glazedlists.event.ListChangeSequence.
commitAtomicChange(ListChangeSequence.java:134)
    [junit]     at com.odellengineeringltd.glazedlists.AbstractFilterList.handle
FilterChanged(AbstractFilterList.java:187)
    [junit]     at com.odellengineeringltd.glazedlists.util.UniqueListTest$IntAr
rayFilterList.setFilter(UniqueListTest.java:526)
    [junit]     at com.odellengineeringltd.glazedlists.util.UniqueListTest.testU
pdateDeleteCollide(UniqueListTest.java:542)</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-14 18:51:34</issue_when>
   <thetext>This is broken because some naive programmer guy didn't do a very good job at implementing 
SortedList. </thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-15 13:02:36</issue_when>
   <thetext>This bug has been fixed as a consequence of bug 37 being fixed.

I performed the Unit Tests and all worked perfectly, for 1000 elements filtered 10 times.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:20:01</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-06 14:51:25</when>
    <field_name>assigned_to</field_name>
    <field_desc>Assigned To</field_desc>
    <oldvalue>issues@glazedlists</oldvalue>
    <newvalue>kevinmaltby</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-07 22:20:22</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-07 22:20:22</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-11 16:46:07</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>REOPENED</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-11 16:46:07</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue>FIXED</oldvalue>
    <newvalue></newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-11 16:46:07</when>
    <field_name>dependson</field_name>
    <field_desc>IssuesThisDependsOn</field_desc>
    <oldvalue></oldvalue>
    <newvalue>40</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 08:56:57</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue></oldvalue>
    <newvalue>37</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-15 13:02:36</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>REOPENED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-15 13:02:36</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:20:01</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>28</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P1</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040521141924</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-03-22 16:52:20</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Lists may fail if the change event indicies are out of order</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-22 16:52:20</issue_when>
   <thetext>Lists that evaluate the values such as SortedList and FilteredList may break if the change event has 
indicies that arrive out of order.

There should be a test for this added to the unit tests and a fix should be made if the problem is 
legitimate.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-23 18:29:42</issue_when>
   <thetext>I have created a JUnit test that confirms the presense of this bug. That test has been added to CVS.

The solution as I see it is to add a method in the ListChangeSequence that is called from 
commitAtomicChanges(). Such a method would examine the list change events and re-order them into 
order of increasing index.

The reordering could potentially also merge adjacent list change blocks but this is not totally necessary.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-24 16:59:48</issue_when>
   <thetext>The ListChangeSequence now bubble-sorts change blocks when the change is commited.

BubbleSort was used because it only swaps adjacent entries. When two change blocks are swapped, 
their indicies must be modified relative to one another. Therefore bubble sort is the simplest sort to 
implement.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-25 13:22:15</issue_when>
   <thetext>This bug appears to remain broken:

    [junit] Testcase: testIndexOutOfOrder(com.odellengineeringltd.glazedlists.test.IndexOrderTest):     
FAILED
    [junit] expected:&lt;[[I@c05d3b, [I@28f6ee, [I@6bade9, [I@66afb3, [I@9945ce, [I@b5dac4, [I@2d96f2, 
[I@110003, [I@17e4ca, [I@adb1d4, [I@75d6ab, [I@60a26f, [I@484a05, [I@f39b3a, [I@542a75, 
[I@af993e, [I@75e4fc, [I@c62c8, [I@2940b3, [I@56b6b9, [I@f66cff, [I@6de49c, [I@bbf1ca, [I@ff0dde, 
[I@e78fc6, [I@901437, [I@1f6226, [I@64ea66, [I@58f9d3, [I@79a2e7, [I@b60280, [I@5e55ab, 
[I@4a55f2, [I@5093f1, [I@20bf2c, [I@e6f7d2, [I@9836ed, [I@3e0ebb, [I@39443f, [I@afae45, [I@da4b71, 
[I@8f1d7e, [I@d9660d, [I@bb0d0d, [I@55e55f, [I@45c859, [I@64883c, [I@2c1e6b, [I@811c88, 
[I@785d65, [I@3bc257, [I@53f67e, [I@5bdc50, [I@dd3812, [I@8c436b, [I@9e5c73, [I@c791b9, 
[I@3020ad, [I@b15692, [I@aa9f99, [I@d42d08, [I@d86fd3, [I@958bb8, [I@7f4ec, [I@60e128, 
[I@5e1077, [I@8b3364, [I@db05b2, [I@530cf2, [I@76fba0, [I@81ed9e, [I@175422, [I@949f69, 
[I@6dadf9, [I@b8d6f7, [I@290fbc, [I@c80b01, [I@4aa0ce, [I@833eca, [I@8f5824, [I@e3cd51, [I@bc8e1e, 
[I@1671b2, [I@82764b, [I@2452e8, [I@bf3d87, [I@60991f, [I@e4f7c2, [I@45f0e3, [I@c9d92c, [I@d0fafc, 
[I@dc6b5, [I@70bea5, [I@f47396, [I@d0af9b, [I@b8f8eb, [I@de17f4, [I@f6ba0f, [I@313906, [I@96cf11, 
[I@f47bf5, [I@f6438d, [I@cd0888]&gt; but was:&lt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 
96, 97, 98, 99, 100, 101]&gt;
    [junit] junit.framework.AssertionFailedError: expected:&lt;[[I@c05d3b, [I@28f6ee, [I@6bade9, 
[I@66afb3, [I@9945ce, [I@b5dac4, [I@2d96f2, [I@110003, [I@17e4ca, [I@adb1d4, [I@75d6ab, 
[I@60a26f, [I@484a05, [I@f39b3a, [I@542a75, [I@af993e, [I@75e4fc, [I@c62c8, [I@2940b3, [I@56b6b9, 
[I@f66cff, [I@6de49c, [I@bbf1ca, [I@ff0dde, [I@e78fc6, [I@901437, [I@1f6226, [I@64ea66, [I@58f9d3, 
[I@79a2e7, [I@b60280, [I@5e55ab, [I@4a55f2, [I@5093f1, [I@20bf2c, [I@e6f7d2, [I@9836ed, 
[I@3e0ebb, [I@39443f, [I@afae45, [I@da4b71, [I@8f1d7e, [I@d9660d, [I@bb0d0d, [I@55e55f, 
[I@45c859, [I@64883c, [I@2c1e6b, [I@811c88, [I@785d65, [I@3bc257, [I@53f67e, [I@5bdc50, 
[I@dd3812, [I@8c436b, [I@9e5c73, [I@c791b9, [I@3020ad, [I@b15692, [I@aa9f99, [I@d42d08, 
[I@d86fd3, [I@958bb8, [I@7f4ec, [I@60e128, [I@5e1077, [I@8b3364, [I@db05b2, [I@530cf2, [I@76fba0, 
[I@81ed9e, [I@175422, [I@949f69, [I@6dadf9, [I@b8d6f7, [I@290fbc, [I@c80b01, [I@4aa0ce, [I@833eca, 
[I@8f5824, [I@e3cd51, [I@bc8e1e, [I@1671b2, [I@82764b, [I@2452e8, [I@bf3d87, [I@60991f, 
[I@e4f7c2, [I@45f0e3, [I@c9d92c, [I@d0fafc, [I@dc6b5, [I@70bea5, [I@f47396, [I@d0af9b, [I@b8f8eb, 
[I@de17f4, [I@f6ba0f, [I@313906, [I@96cf11, [I@f47bf5, [I@f6438d, [I@cd0888]&gt; but was:&lt;[0, 1, 2, 3, 
4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 
32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 
58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 
84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]&gt;
    [junit]     at 
com.odellengineeringltd.glazedlists.test.IndexOrderTest.testIndexOutOfOrder(IndexOrderTest.java:85)
    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:
25)
</thetext>
  </long_desc>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-04-03 14:10:09</issue_when>
   <thetext>The current ordering of events appears to be inverted and thus events appear in 
decreasing order.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-05 22:58:38</issue_when>
   <thetext>Fixed! Again! This bug has haunted me all day. 

The solution sorts and combines properly, but not necessarily too efficiently. If this proves to be a 
problem, I'll send the optimization police onto it!

Here's an example of the (poor) runtime. Changes are measured in loop executions.
    [junit] Changed! blocks before: 142, after: 142, changes: 141
    [junit] Changed! blocks before: 204, after: 1, changes: 405
    [junit] Changed! blocks before: 203, after: 88, changes: 9890
    [junit] Changed! blocks before: 306, after: 253, changes: 647
    [junit] Changed! blocks before: 541, after: 40, changes: 5257
    [junit] Changed! blocks before: 514, after: 73, changes: 27433
    [junit] Changed! blocks before: 212, after: 158, changes: 439
    [junit] Changed! blocks before: 626, after: 9, changes: 46633
    [junit] Changed! blocks before: 548, after: 67, changes: 22004
    [junit] Changed! blocks before: 141, after: 141, changes: 140
    [junit] Changed! blocks before: 411, after: 91, changes: 20767
    [junit] Changed! blocks before: 119, after: 119, changes: 118
    [junit] Changed! blocks before: 490, after: 2, changes: 32108
    [junit] Changed! blocks before: 460, after: 81, changes: 24387
    [junit] Changed! blocks before: 121, after: 121, changes: 120
    [junit] Changed! blocks before: 551, after: 81, changes: 24285
    [junit] Changed! blocks before: 219, after: 176, changes: 447
    [junit] Changed! blocks before: 623, after: 68, changes: 53634
    [junit] Changed! blocks before: 572, after: 23, changes: 23838
    [junit] Changed! blocks before: 34, after: 34, changes: 33
    [junit] Changed! blocks before: 41, after: 29, changes: 919
    [junit] Changed! blocks before: 55, after: 55, changes: 54
    [junit] Changed! blocks before: 77, after: 50, changes: 2964
    [junit] Changed! blocks before: 65, after: 1, changes: 127
    [junit] Changed! blocks before: 46, after: 46, changes: 45
</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:19:24</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-23 18:29:42</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-24 16:59:48</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-24 16:59:48</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-25 13:22:15</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>REOPENED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-25 13:22:15</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue>FIXED</oldvalue>
    <newvalue></newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-05 22:58:38</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>REOPENED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-05 22:58:38</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:19:24</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>29</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P4</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040521142023</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-03-25 12:39:34</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>ToString on BasicEventList, MutationList no good</short_desc>
  <keywords></keywords>
  <blocks>37</blocks>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-25 12:39:34</issue_when>
   <thetext>The toString value on Java Lists is like "[lemon, orange, apple, banana]"
but on Glazed Lists it is like "com.odellengineeringltd.glazedlists.BasicEventList@f4d448ce"</thetext>
  </long_desc>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-04-09 14:06:57</issue_when>
   <thetext>The toString value on Glazed Lists is the same as the toString value on Java 
Lists now.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:20:23</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 08:56:02</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue></oldvalue>
    <newvalue>37</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-09 14:06:57</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-09 14:06:57</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:20:23</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>30</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P4</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040521142040</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>TASK</issue_type>
  <creation_ts>2004-03-26 08:05:12</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Verify ListTable changeSizeRepaintAllThreshhold works</short_desc>
  <keywords></keywords>
  <blocks>37</blocks>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-26 08:05:12</issue_when>
   <thetext>Some users have had problems with the behaviour of Glazed Lists when the 
changeSizeRepaintAllThreshhold is low.

Verify that the behaviour is:
 - correct
 - faster than using single changes</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-11 13:32:50</issue_when>
   <thetext>I've done some research and learned a lot about the behaviour of JTable.

When you give JTable a large set of small changes, it has different behaviour depending on what its 
renderer is doing. If the table rows all have a uniform height, then the JTable is very fast at handling 
such a set of changes. If the table rows have nonuniform height, however, the JTable is very slow.

Therefore I am going to make a few small changes:
 - I am going to further document the changeSizeRepaintAllThreshhold and its relationship with the 
table speed in both the ListTable class and in the performance section of the tutorial
 - I am going to change the default value of changeSizeRepaintAllThreshhold to 250, and add proper 
getter and setter values. The table performance was intolerable with variable row sizes when there were 
mroe than 250 changes, but may be acceptable below that.

Note that the changeSizeRepaintAllThreshhold is an unwanted hack to work around the poor behaviour 
of JTable in such situations. It has major problems because it forces the table to lose its selection and 
its scrolling.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-11 14:32:29</issue_when>
   <thetext>I have changed the behaviour of repaintAllThreshhold to default to Integer.MAX_VALUE. Therefore new 
repaintAllThreshhold must be set manually to be enabled. This is good because the whole thing is kind 
of an ugly hack to get around the poor behaviour of the JTable's ability to track row height. 

I believe the whole problem stems from a poor implementation of SizeSequence in the JVM. I think a 
tree-based structure similar to the one used for SparseList may be more appropriate.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:20:40</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 08:56:02</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue></oldvalue>
    <newvalue>37</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-11 13:32:50</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-11 14:32:29</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-11 14:32:29</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:20:40</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>31</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P2</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040521141941</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>ENHANCEMENT</issue_type>
  <creation_ts>2004-03-26 09:04:45</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>More powerful TableComparatorSelector</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-26 09:04:45</issue_when>
   <thetext>Glazed Lists' TableComparatorSelector does not:
 - have chevrons or arrows to indicate sort order
 - allow sorting by multiple columns simultaneously

These should be implemented by "beefing-up" TableComparatorSelector.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-30 18:29:15</issue_when>
   <thetext>I've moved this from priority 4 to priority 2 due to demand!

I also got some additional info from the users mailing list.

Source for a tool that does table header stuff well:
http://www.fawcette.com/javapro/2002_08/magazine/columns/visualcomponents/

Also - the table should support raw-order sort.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-02 17:22:50</issue_when>
   <thetext>I have started preliminary work on this.

I have yet to do the header arrows and multiple-column sort, but the new TableComparatorSelector is 
already much, much better.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-03 20:18:55</issue_when>
   <thetext>I've added support for multiple column sort, and arrow icons.

Header/table sorting is now a FIRST CLASS feature in Glazed Lists.

All that's left is support for raw sort order. I will enter a new bug for that as the support should be done 
in SortedList.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:19:41</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-30 18:29:15</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-03-30 18:29:15</when>
    <field_name>priority</field_name>
    <field_desc>Priority</field_desc>
    <oldvalue>P4</oldvalue>
    <newvalue>P2</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-03 20:18:55</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-03 20:18:55</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:19:41</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>32</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P5</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>kevinmaltby</assigned_to>
  <delta_ts>20040331184249</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>ENHANCEMENT</issue_type>
  <creation_ts>2004-03-31 18:42:49</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>CachingList could be more powerful</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-03-31 18:42:49</issue_when>
   <thetext>As Kevin and I were working on the CachingList problems today, we came up with some clever new 
ideas for a powerful replacement for CachingList:

 - background loading. Calls to get() return a default value immediately, then load the actual value in 
the background. Finally fire a updated() event when the actual value is loaded.

 - bulk loading via an API. Create a Caching API for performing BulkLoading. This is not really a 
MutationList because it would require more than an EventList as a source. Bulk loading could be faster 
but it is definitely a big fat ugly pig to implement.

 - footprint that is bounded by max cache size and NOT by the size of the source list. This will be 
necessary for arbitrarily large source lists on finitely powerful computers.

Regardless of where we go forward with Caching, it will be necessary to find some real-world cases that 
require caching before we commit serious time to the problem. Such cases will enable us to have a 
user's perspective on caching.</thetext>
  </long_desc>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>33</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P2</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040521141946</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>ENHANCEMENT</issue_type>
  <creation_ts>2004-04-03 20:20:10</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>SortedList raw order support</short_desc>
  <keywords></keywords>
  <blocks>37</blocks>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-03 20:20:10</issue_when>
   <thetext>SortedList should support raw order when the current comparator is NULL.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-05 13:00:09</issue_when>
   <thetext>This is now high priority as it is needed for making TableComparatorChooser work better.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-09 08:27:19</issue_when>
   <thetext>Done!

Although the SortedList now supports raw-order sort, this is not supported by 
TableComparatorChooser.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:19:46</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-05 13:00:09</when>
    <field_name>priority</field_name>
    <field_desc>Priority</field_desc>
    <oldvalue>P3</oldvalue>
    <newvalue>P2</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 08:56:02</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue></oldvalue>
    <newvalue>37</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-09 08:27:19</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-09 08:27:19</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:19:46</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>34</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040521141953</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>kevinmaltby</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-04-07 22:33:08</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>UniqueList sometimes does not forward events on a DELETE</short_desc>
  <keywords></keywords>
  <blocks>37</blocks>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-04-07 22:33:09</issue_when>
   <thetext>UniqueList currently does not forward events on when a DELETE is encountered in 
the following instance:

The element being removed is modelled in the unique view and has at least one 
duplicate.  This should result in the duplicate being modelled in the unique 
view and an update event being forwarded.

In some circumstances, such as on a call to clear() on the source list, 
forwarding this event causes the following exception:

Change blocks U.0 and D.0-1 intersect
java.lang.IllegalStateException: Change blocks U.0 and D.0-1 intersect
at com.odellengineeringltd.glazedlists.event.ListChangeBlock.requiresSwap
(ListChangeBlock.java:185)...

This fix will require altering the current strategy for dealing with change 
collisions in ListChangeBlock.</thetext>
  </long_desc>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-04-13 22:57:12</issue_when>
   <thetext>UniqueList now forwards events correctly in all cases when handling DELETE 
events.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:19:53</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 08:56:02</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue></oldvalue>
    <newvalue>37</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-13 22:57:12</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-13 22:57:12</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:19:53</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>35</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P3</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040407223916</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>kevinmaltby</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>ENHANCEMENT</issue_type>
  <creation_ts>2004-04-07 22:39:16</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>UniqueList needs a means of forwarding non-mandatory change events</short_desc>
  <keywords></keywords>
  <blocks>36</blocks>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-04-07 22:39:16</issue_when>
   <thetext>UniqueList needs to provide access to non-mandatory change events for 
overlaying lists which want to listen to them.</thetext>
  </long_desc>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-07 22:53:17</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue></oldvalue>
    <newvalue>36</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>36</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P3</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040407225424</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>kevinmaltby</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>FEATURE</issue_type>
  <creation_ts>2004-04-07 22:53:17</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>GlazedLists requires a counted, unique view of a given list.</short_desc>
  <keywords></keywords>
  <dependson>35</dependson>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-04-07 22:53:17</issue_when>
   <thetext>This list type is based on the Bag ADT and is currently unnamed.

This class will sit on top of a UniqueList, and listen to all change events 
from the UniqueList to correctly provide access to not only a view which is 
guaranteed to be unique, but also the number of duplicate values for each 
unique value.

An example usage would be a list of votes for favourite pop.

Source         Unique View         Unique, Counted
------------------------------------------------------
Pepsi        | Coke              | Coke x 3
Coke         | MountainDew       | Mountain Dew
Sprite       | Pepsi             | Pepsi x 2
Pepsi        | Sprite            | Sprite
Mountain Dew |                   |
Coke         |                   |
Coke         |                   |
------------------------------------------------------

Clearly this could provide a valuable list view.</thetext>
  </long_desc>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-04-07 22:54:24</issue_when>
   <thetext>Specified an explicit dependency upon Issue 35.</thetext>
  </long_desc>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-07 22:53:17</when>
    <field_name>dependson</field_name>
    <field_desc>IssuesThisDependsOn</field_desc>
    <oldvalue></oldvalue>
    <newvalue>35</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>37</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040521142016</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>TASK</issue_type>
  <creation_ts>2004-04-08 08:56:02</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Glazed Lists version 0.8 release</short_desc>
  <keywords></keywords>
  <dependson>27</dependson>
  <dependson>29</dependson>
  <dependson>30</dependson>
  <dependson>33</dependson>
  <dependson>34</dependson>
  <dependson>40</dependson>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-08 08:56:02</issue_when>
   <thetext>Glazed Lists version 0.8 is the last release before Glazed Lists undergoes the major API change.

Glazed Lists 0.8 will be a release that should be permanently available on the Glazed Lists webpage for 
existing users, but such users should be encouraged to migrate to Glazed Lists 0.9.

Glazed Lists v0.8 does not inlcude:
 - the renaming of APIs and classes
 - the new concurrency model

It depents upon the following issues:
 33 - SortedList raw order support
 34 - UniqueList sometimes does not forward events on a DELETE
 29 - ToString on BasicEventList, MutationList no good
 30 - Verify ListTable changeSizeRepaintAllThreshhold works</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-08 08:56:57</issue_when>
   <thetext>This issue depends on the outstanding bugs in the 0.8 release. It does not require new features or 
enhancements.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-14 18:52:27</issue_when>
   <thetext>The 0.8 release can't be done until the SortedList is fixed and the UniqueList is finished (and verified)</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-17 17:21:45</issue_when>
   <thetext>Version 0.8 was released on April 15, 2004.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:20:16</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 08:56:02</when>
    <field_name>dependson</field_name>
    <field_desc>IssuesThisDependsOn</field_desc>
    <oldvalue></oldvalue>
    <newvalue>29,30,33,34</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 08:56:57</when>
    <field_name>dependson</field_name>
    <field_desc>IssuesThisDependsOn</field_desc>
    <oldvalue>29,30,33,34</oldvalue>
    <newvalue>27,29,30,33,34,40</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-17 17:21:45</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-17 17:21:45</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:20:16</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>38</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P4</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040521142032</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-04-08 08:59:21</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>TableComparatorChooser icon can get out of sync</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-08 08:59:21</issue_when>
   <thetext>When the sorting of a list changes, the TableComparatorChooser fails to respond to this change 
appropriately. The TableComparatorChooser should show the proper icon, even if the sorted list's 
comparator was selected elsewhere.</thetext>
  </long_desc>
  <long_desc>
   <who>kevinmaltby</who>
   <issue_when>2004-04-09 16:40:02</issue_when>
   <thetext>TableComparatorChooser now responds to sorting criteria changing externally.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:20:32</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-09 16:40:02</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>kevinmaltby</user>
    <when>2004-04-09 16:40:02</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:20:32</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>39</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P4</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040413134126</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-04-13 13:41:26</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Sorting clears selection</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-13 13:41:26</issue_when>
   <thetext>This problem will be very difficult to solve using the current Glazed Lists framework, but it is a valid 
problem. Sorting clears the selection. 

The only fix I can think of is to add a new type of event alongside INSERT, UPDATE and DELETE which is 
called MOVE. I think it is kind of an ugly hack on principal because it will impact all other lists if it is 
implemented. 

I will have to give this one some more thought. Saving selection by value may be one option but that is 
also rather a big ugly hack.</thetext>
  </long_desc>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>40</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P2</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>jessewilson</assigned_to>
  <delta_ts>20040521141933</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-04-14 18:50:07</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Sorted List fails upon intensive filtering</short_desc>
  <keywords></keywords>
  <blocks>27</blocks>
  <blocks>37</blocks>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-14 18:50:07</issue_when>
   <thetext>SortedList fails upon an intensive amount of filtering. The SortedListTest must be updated to catch this 
failure and the SortedList should also be fixed to remedy the problem.

    [junit] FILTER: 4, 5, 1, 6, 2, 3, 2, 8, 1, 3, 
    [junit] SORTED: 1, 1, 2, 3, 2, 3, 4, 8, 5, 6,</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-04-15 12:59:13</issue_when>
   <thetext>I was processing the events in the ListChangeEvent in a manner that was unsafe when there were 
inserts mixed with deletes.

The SortedList now fires all delete events first, and then goes on to handle the inserts and updates 
later.
</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:19:33</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-11 16:46:07</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue></oldvalue>
    <newvalue>27</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-08 08:56:57</when>
    <field_name>blocked</field_name>
    <field_desc>OtherIssuesDependingOnThis</field_desc>
    <oldvalue>27</oldvalue>
    <newvalue>27,37</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-15 12:59:13</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-04-15 12:59:13</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:19:33</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>41</issue_id>
  <issue_status>RESOLVED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040602231024</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>TASK</issue_type>
  <creation_ts>2004-05-21 14:33:32</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Glazed Lists version 0.9 release</short_desc>
  <keywords></keywords>
  <dependson>20</dependson>
  <dependson>26</dependson>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:33:32</issue_when>
   <thetext>This issue depends upon all issues to be resolved for the 0.9 release.

These issues include the name refactoring and API stability.

Glazed Lists 0.9 is a release intended to have 100% compatibility with 1.0. This includes:
 - class &amp; package names
 - concurrency strategy
 - event sequence strategy</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:34:50</issue_when>
   <thetext>This release depends upon the 0.9 issues.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-02 15:31:50</issue_when>
   <thetext>TO DO, left in this release, off the top of my head:
* make final classes final
* determine where EventList iterator/sublist goes
* tutorial? may defer to 1.0
* rename main package (ca.odell.glazedlists)
* port Query stuff to use UniqueList, move package to migrationkit
* move DEMO out of Javadocs (new demo for 1.0 definitely needed)
* change TableFormat to not include configureTable() method</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-02 23:10:24</issue_when>
   <thetext>Released!</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:34:50</when>
    <field_name>dependson</field_name>
    <field_desc>IssuesThisDependsOn</field_desc>
    <oldvalue></oldvalue>
    <newvalue>20,26</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 14:34:50</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>STARTED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-02 23:10:24</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>STARTED</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-02 23:10:24</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>42</issue_id>
  <issue_status>CLOSED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040609143521</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-05-21 14:38:14</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Enable concurrent mutation list modifications</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 14:38:14</issue_when>
   <thetext>Currently the reader/writer locks lock ALL lists when any mutation list is being modified (ie. re-sorted).

The reader/writer locks should be changed to only lock dependent lists when such a modification takes 
place.

This applies to:
 - AbstractFilterList
 - SortedList
 - UniqueList
 - CachingList
 - and potentially others</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 17:11:14</issue_when>
   <thetext>Fixed . . . now the SortedList and AbstractFilterList can sort or filter multiple lists with the same source 
simultaneously. This uses the new InternalReadWriteLock which delegates locking to a pair of 
ReadWriteLocks.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-09 14:35:21</issue_when>
   <thetext>This bug has been fixed for two weeks with no problems. I am marking it closed.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 17:11:14</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-05-21 17:11:14</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-09 14:35:21</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>RESOLVED</oldvalue>
    <newvalue>CLOSED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>43</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P5</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040521171310</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-05-21 17:13:10</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Potential deadlock in CachingList</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-05-21 17:13:10</issue_when>
   <thetext>The CachingList acquires a WriteLock when it may already have a ReadLock.

This is DANGEROUS! It is possible that two CachingLists may each have readlocks, and contest over a 
write lock to their doom!</thetext>
  </long_desc>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>44</issue_id>
  <issue_status>RESOLVED</issue_status>
  <priority>P2</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040602121605</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-06-02 08:23:59</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>remove(object), clear() can have unwanted side effects</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-02 08:23:59</issue_when>
   <thetext>Suppose we have a List "alphabet" containing "A", "B", "C", "D", "E", "F".
If we call alphabet.subList(1, 3).clear(), then the list alphabet should change to "A", "D", "E", "F".
But Glazed Lists clears the entire list alphabet.

Similar problems exist upon clearing filtered lists, etc.

This problem exists in the following List methods:
clear()
remove(Object)
removeAll(Collection)
retainAll(Collection)</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-02 12:16:05</issue_when>
   <thetext>Fixed! Hopefully, this doesn't ruin any code in place because the behaviour of SubList etc.
are now correct. Existing code could possibly depend on the incorrect implementations!
Hopefully that does not prove to be a problem.

This fix allows us to do cool things, as I will demonstrate:

Suppose we have a list, alphabet composed of { A, B, C, D, E, F, G, H, I, J, K }
And we constructed a transformed list vowels, which filtered alphabet to { A, E, I }
Then if we do vowels.clear(), we get the following result:
alphabet becomes: B, C, D, F, G, H, J, K

Cool, no? This would be made more powerful with a better example. Perhaps a list of email addresses, 
and a filter list that picks the SPAM or whatever.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-02 12:16:05</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-02 12:16:05</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>45</issue_id>
  <issue_status>RESOLVED</issue_status>
  <priority>P2</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040602134840</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>ENHANCEMENT</issue_type>
  <creation_ts>2004-06-02 12:18:56</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Add write functionality to UniqueList</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-02 12:18:56</issue_when>
   <thetext>The UniqueList should be writable. Some write methods to include:

add(), remove(), set() . . .

The most interesting ones to implement will be the remove() methods as they may require removing 
multiple duplicates from the source list.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-02 13:48:40</issue_when>
   <thetext>I have added write support to UniqueList.

There is an interesting problem posed by supporting writing in UniqueList, as well as writing in other 
code already implemented via bug 44.

Methods such as clear() on a filter list may call several remove() methods on the underlying source list. 
These remove() methods fire the event listeners and other lists receive notification for each of many 
removes within a clear. Such listeners will likely read from their source list to respond to the change, 
and it is possible that this source list is still in the process of changing due to the clear() method. 
Therefore:
 - such methods that call multiple changing methods on their source list must be in a consistent state 
for each such method call
 - such methods must be implemented in a way that safely handles receiving a change event after each 
source list modification.

These multiple source method calling lists are troublesome and it may be worthwhile to find a way to 
bundle a set of methods to invoke on a source list as a group. This is a sophisticated problem and will 
require some research. For the time being, guaranteeing consistency and event safety should be 
sufficient.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-02 13:48:40</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-02 13:48:40</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>46</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P4</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040603053607</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-06-03 05:36:07</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>UniqueList, FilterList fire multiple events for some operations</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-03 05:36:07</issue_when>
   <thetext>UniqueList.clear(), FilterList.clear(), SubList.clear() all can fire multiple ListEvents when only a single 
operation is performed upon them.

This can be fixed by causing such lists to not propogate changes until they are all done.</thetext>
  </long_desc>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>47</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P3</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040603053931</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>ENHANCEMENT</issue_type>
  <creation_ts>2004-06-03 05:39:31</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Threshhold List</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-03 05:39:31</issue_when>
   <thetext>Suppose we have a list of Objects, each of which has a date created.

It should be possible to create a filter that filters for where the date created is less than or greater than 
a specified threshhold. This should be possible for any criteria that can take a range of values - in 
effect anything that is Comparable.

Currently this is possible using the AbstractFilterList, but it is not 'smart' enough to know how 
adjustments in the criteria require only a subset of the values to be readjusted. A clever implementation 
of this would use a sorted set, and binary search to find the seperator between those that meet the 
criteria and those that do not.

I was thinking a "Date Slider" Swing widget would be a good prototype of this!</thetext>
  </long_desc>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>48</issue_id>
  <issue_status>RESOLVED</issue_status>
  <priority>P3</priority>
  <resolution>FIXED</resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040603130359</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-06-03 13:02:42</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Migrationkit's DynamicQueryList fails to forward events</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-03 13:02:42</issue_when>
   <thetext>The Migrationkit's DynamicQueryList class is not forwarding events.</thetext>
  </long_desc>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-03 13:03:59</issue_when>
   <thetext>This bug has already been fixed.

The fix is NOT in the Glazed Lists 0.9 release, but it will be in the next Glazed Lists release. The fix is 
also available via CVS.</thetext>
  </long_desc>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-03 13:03:59</when>
    <field_name>issue_status</field_name>
    <field_desc>Status</field_desc>
    <oldvalue>NEW</oldvalue>
    <newvalue>RESOLVED</newvalue>
  </activity>
  <activity>
    <user>jessewilson</user>
    <when>2004-06-03 13:03:59</when>
    <field_name>resolution</field_name>
    <field_desc>Resolution</field_desc>
    <oldvalue></oldvalue>
    <newvalue>FIXED</newvalue>
  </activity>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>49</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P3</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040603134613</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>TASK</issue_type>
  <creation_ts>2004-06-03 13:46:13</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Tutorial v. 0.9</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-03 13:46:13</issue_when>
   <thetext>Glazed Lists needs a new tutorial. It would be great if this tutorial involved a newer, more exciting and 
more powerful demo app.

My current two ideas are:
 - a bugzilla XML browser
 - a Pop3 client

Such involve lots of lists and could take good advantage of Glazed Lists' ability to transform lists.

The demo should involve:
 - Multiple-criterea sorting
 - Text Filtering &amp; Custom Filtering
 - UniqueList, UniqueList on a derived list
 - Transformed List
 - JTable, JComboBox &amp; JList

The demo should not rely on third-party libraries or tools for simplicity.</thetext>
  </long_desc>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>50</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P4</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040605085016</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>ENHANCEMENT</issue_type>
  <creation_ts>2004-06-05 08:50:16</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>SWT Support</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-05 08:50:16</issue_when>
   <thetext>Glazed Lists does not support SWT. This toolkit is growing in importance and Glazed Lists is well suited 
for this platform.

Some things to consider:
 - I need an SWT 'expert', either by becoming one or by finding a volunteer
 - SWT compilation into the .jar file must be conditional. SWT support should be in source-form only 
and compiled only if SWT classes are available on the user's class path.
 - From my initial research, SWT is not as model-driven as Swing. Although this does not pose a 
problem it may require a change in approach
 - We need to choose an SWT version to support. 3.0 is coming out soon but I have no idea what the 
actual SWT users in the field are using.</thetext>
  </long_desc>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>51</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P3</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040609205635</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>TASK</issue_type>
  <creation_ts>2004-06-09 20:56:35</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Implement Chunk Transfer Protocol client &amp; servers</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-09 20:56:35</issue_when>
   <thetext>We have hacked out a basic plan for the initial network protocol for Glazed Lists.

We are going to use a layered protocol to isolate concerns:
 - "Chunk Transfer Protocol" is our base protocol. This is a simplification of HTTP/1.1 with chunked 
encoding. We would like Glazed Lists to work through HTTP proxies and HTTP-aware firewalls so this 
protocol shall be a subset of HTTP/1.1.
 - "Update Subscription Protocol" is an update-push protocol that sits on top of CTP and adds some 
application-specific features. This will initially consist of update sequencing. Eventual features for this 
are digitally signed updates, peer-to-peer support and NAT evasion.
 - Glazed Lists on the network will specify an encoding for list updates that can be transferred via USP. 

All encodings must have the following properties:
 - well documented to allow for alternative implementations
 - extendible without breaking clients using previous versions
 - language and platform neutral
 - simple!

All that said, we need to implement the first step, Chunk Transfer Protocol. Here are the interfaces for 
the initial version of CTP:

CTPServerProtocol
void sendResponse(int code, Map headers) throws CTPException;
void sendChunk(byte[] data) throws CTPException;
void close();
CTPServerHandler
void receiveGet(CTPServerProtocol source, String uri, Map headers);
void connectionClosed(CTPServerProtocol source, Exception reason);

CTPClientProtocol
void sendGet(String uri, Map headers) throws CTPException;
void close();
CTPClientHandler
void receiveResponse(CTPClientProtocol source, int code, Map headers);
void receiveChunk(CTPClientProtocol source, byte[] data);
void connectionClosed(CTPClientProtocol source, Exception reason);

It should be straightforward to create a simple implementation that uses sockets. This design should 
also hopefully be extendable for use with Java's buffered IO, java.nio.</thetext>
  </long_desc>
</issue>
<issue status_code="200" status_message="OK">
  <issue_id>52</issue_id>
  <issue_status>NEW</issue_status>
  <priority>P3</priority>
  <resolution></resolution>
  <component>glazedlists</component>
  <version>current</version>
  <rep_platform>All</rep_platform>
  <assigned_to>issues@glazedlists</assigned_to>
  <delta_ts>20040610080733</delta_ts>
  <subcomponent>www</subcomponent>
  <reporter>jessewilson</reporter>
  <target_milestone>milestone 1</target_milestone>
  <issue_type>DEFECT</issue_type>
  <creation_ts>2004-06-10 08:07:33</creation_ts>
  <qa_contact>issues@glazedlists</qa_contact>
  <status_whiteboard></status_whiteboard>
  <votes></votes>
  <op_sys>All</op_sys>
  <short_desc>Support 'nested' change events</short_desc>
  <keywords></keywords>
  <long_desc>
   <who>jessewilson</who>
   <issue_when>2004-06-10 08:07:33</issue_when>
   <thetext>Adding support for nested change events may simplify the code and may even make it more powerful.

Currently, some classes such as TransformationList implement clear(), removeAll() etc. as a series of 
remove() calls. This fires a series of events when only one event should be fired.

The solution is to create 'nested' change events such as
beginNestedChange()
commitNestedChange()

which can contain within it many calls to beginChange() / commitChange(), where such commits do not 
actually send the events.</thetext>
  </long_desc>
</issue>
</issuezilla>